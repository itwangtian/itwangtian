import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-6af8d918.js";const p={},t=e(`<h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><p>在 TypeScript 中，枚举（Enum）是一种定义常量的方式，可以用简洁、可读性强的方式，定义一组命固定集合的值（常量）。</p><p>在 JavaScript 中，在没有枚举语言特性的情况下，常常使用以下方法来表示一组常量：</p><ol><li>使用命名的变量或常量。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">RED</span> <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">GREEN</span> <span class="token operator">=</span> <span class="token string">&quot;green&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">BLUE</span> <span class="token operator">=</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式可能容易出错，因为限制了变量的作用域，而且可能会有命名冲突或拼写错误等问题。</p><ol start="2"><li>使用简单的对象字面量。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Colors <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token constant">RED</span><span class="token operator">:</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span>
  <span class="token constant">GREEN</span><span class="token operator">:</span> <span class="token string">&quot;green&quot;</span><span class="token punctuation">,</span>
  <span class="token constant">BLUE</span><span class="token operator">:</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用对象字面量可以提供一些命名空间的支持，但并不能限制变量值的修改，这意味着你仍然可以通过赋值操作改变枚举值。</p><p>这就是 TypeScript 中枚举的作用所在：它提供了一种更强大、更安全的方式来定义一组有限的常量。</p><p>枚举在 TypeScript 中的优势和解决了 JavaScript 中的一些痛点包括：</p><ol><li>类型安全性：枚举在 TypeScript 中是具有类型的，编译器可以在编译时进行类型检查，确保只使用枚举中定义的值。</li><li>命名空间和作用域：枚举在一定程度上提供了命名空间的支持，可以更好地组织和管理常量集合，并且不会发生命名冲突。</li><li>可读性：通过使用枚举，可以直观地了解代码中某个值的含义，提高了代码的可读性和可维护性。</li><li>自文档化：枚举可以作为文档的一部分，提供了一个可供其他开发人员查阅的可扩展的集合。</li></ol><p>总之，TypeScript 中的枚举提供了一种更加结构化和类型安全的方式，来表示固定集合的值，并解决了 JavaScript 中使用常量时的一些问题。</p><h2 id="_2-基本用法" tabindex="-1"><a class="header-anchor" href="#_2-基本用法" aria-hidden="true">#</a> 2. 基本用法</h2><p>枚举的基本用法是定义一个枚举类型，然后使用它来声明变量或函数参数。下面是一个基本的示例：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 定义一个表示颜色的枚举</span>
<span class="token keyword">enum</span> Color <span class="token punctuation">{</span>
  Red<span class="token punctuation">,</span>
  Green<span class="token punctuation">,</span>
  Blue<span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用枚举类型声明变量</span>
<span class="token keyword">let</span> myColor<span class="token operator">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myColor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们定义了一个枚举类型 <code>Color</code>，它包含了三个成员：<code>Red</code>、<code>Green</code> 和 <code>Blue</code>。</p><p>默认情况下，枚举成员的值从 <code>0</code> 开始自动递增，所以 <code>Red</code> 的值是 <code>0</code>，<code>Green</code> 的值是 <code>1</code>，<code>Blue</code> 的值是 <code>2</code>。</p><p>我们可以使用枚举类型来声明变量 <code>myColor</code>，并将它的值设置为 <code>Color.Green</code>。最后，我们打印了 <code>myColor</code> 的值，结果是 <code>1</code>。</p><h2 id="_3-常数项和计算所得项" tabindex="-1"><a class="header-anchor" href="#_3-常数项和计算所得项" aria-hidden="true">#</a> 3. 常数项和计算所得项</h2><p>在枚举中，成员可以是常数项或计算所得项。</p><p>常数项是声明枚举时就已经指定好的值，这些值不能被修改。如果没有给常数项赋值，它们将按照从 <code>0</code> 开始的顺序递增。</p><p>计算所得项是根据表达式在运行时计算出的值，可以用于根据之前定义的常数项进行计算。计算所得项必须在表达式中使用，不能直接赋值给其他成员。</p><p>以下是一个示例，演示了常数项和计算所得项的用法：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>
  Up<span class="token punctuation">,</span> <span class="token comment">// 常数项，默认值为 0</span>
  Down<span class="token punctuation">,</span> <span class="token comment">// 常数项，默认值为 1</span>
  Left <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment">// 常数项指定具体值为 10</span>
  Right <span class="token operator">=</span> Left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 计算所得项，值为 11（Left 的值加 1）</span>
<span class="token punctuation">}</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Direction<span class="token punctuation">.</span>Up<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 0</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Direction<span class="token punctuation">.</span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 10</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Direction<span class="token punctuation">.</span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中，<code>Direction</code> 枚举包含了四个成员。</p><p><code>Up</code> 和 <code>Down</code> 是常数项，默认情况下它们的值分别是 <code>0</code> 和 <code>1</code>。<code>Left</code> 是一个常数项，我们明确地将它的值设置为 <code>10</code>。<code>Right</code> 是一个计算所得项，它的值是 <code>Left + 1</code>，即 <code>10 + 1</code>，结果是 <code>11</code>。</p><h2 id="_4-常数枚举" tabindex="-1"><a class="header-anchor" href="#_4-常数枚举" aria-hidden="true">#</a> 4. 常数枚举</h2><p>常数枚举是一种特殊类型的枚举，在编译时会被删除，并且对枚举成员的引用会被替换为具体的值。常数枚举可以在一些性能优化和减少代码量的情况下使用。</p><p>下面是一个示例，展示了常数枚举的用法：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token keyword">enum</span> Size <span class="token punctuation">{</span>
  Small<span class="token punctuation">,</span>
  Medium<span class="token punctuation">,</span>
  Large<span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">printSize</span><span class="token punctuation">(</span>size<span class="token operator">:</span> Size<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">printSize</span><span class="token punctuation">(</span>Size<span class="token punctuation">.</span>Small<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 编译后会直接替换为具体的值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们使用 <code>const enum</code> 关键字定义了一个常数枚举 <code>Size</code>，它包含三个成员。</p><p><code>printSize</code> 函数接受一个参数 <code>size</code>，类型为 <code>Size</code> 枚举。在函数体内，我们打印了 <code>size</code> 的值。由于 <code>Size</code> 是一个常数枚举，在编译时会被直接替换为具体的值。</p><p>所以，当我们调用 <code>printSize(Size.Small)</code> 时，编译后的代码将直接打印 <code>0</code>。</p><h2 id="_5-实战开发案例" tabindex="-1"><a class="header-anchor" href="#_5-实战开发案例" aria-hidden="true">#</a> 5. 实战开发案例</h2><p>让我们以一个实战开发案例来综合应用学到的 TypeScript 枚举知识。</p><p>假设你正在开发一个游戏，游戏中有不同种类的怪物，每个怪物都有不同的属性。我们可以使用枚举来表示不同种类的怪物以及它们的属性。</p><p>以下是一个示例代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> MonsterType <span class="token punctuation">{</span>
  Goblin<span class="token punctuation">,</span>
  Orc<span class="token punctuation">,</span>
  Troll<span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Monster</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> MonsterType<span class="token punctuation">;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  health<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  attack<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">createMonster</span><span class="token punctuation">(</span>monsterType<span class="token operator">:</span> MonsterType<span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Monster <span class="token punctuation">{</span>
  <span class="token keyword">let</span> monster<span class="token operator">:</span> Monster<span class="token punctuation">;</span>

  <span class="token keyword">switch</span> <span class="token punctuation">(</span>monsterType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> MonsterType<span class="token punctuation">.</span>Goblin<span class="token operator">:</span>
      monster <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> monsterType<span class="token punctuation">,</span> name<span class="token punctuation">,</span> health<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> attack<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> MonsterType<span class="token punctuation">.</span>Orc<span class="token operator">:</span>
      monster <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> monsterType<span class="token punctuation">,</span> name<span class="token punctuation">,</span> health<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> attack<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> MonsterType<span class="token punctuation">.</span>Troll<span class="token operator">:</span>
      monster <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> monsterType<span class="token punctuation">,</span> name<span class="token punctuation">,</span> health<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> attack<span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;未知的怪物类型&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> monster<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> goblin <span class="token operator">=</span> <span class="token function">createMonster</span><span class="token punctuation">(</span>MonsterType<span class="token punctuation">.</span>Goblin<span class="token punctuation">,</span> <span class="token string">&quot;格鲁皮&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>goblin<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个案例中，我们定义了一个枚举类型 <code>MonsterType</code> 来表示不同种类的怪物。</p>`,40),o=[t];function c(i,l){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","ozukh6zecsqvagsm.html.vue"]]);export{d as default};
