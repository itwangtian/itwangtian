import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as n,b as s,d as e,e as i}from"./app-e2fbee63.js";const l={},r=i(`<h1 id="typescript-基础语法" tabindex="-1"><a class="header-anchor" href="#typescript-基础语法" aria-hidden="true">#</a> TypeScript 基础语法</h1><p>TypeScript 程序由以下几个部分组成：</p><ul><li>模块</li><li>函数</li><li>变量</li><li>语句和表达式</li><li>注释</li></ul><h2 id="第一个-typescript-程序" tabindex="-1"><a class="header-anchor" href="#第一个-typescript-程序" aria-hidden="true">#</a> 第一个 TypeScript 程序</h2><p>我们可以使用以下 TypeScript 程序来输出 &quot;Hello World&quot; ：</p><h3 id="runoob-ts-文件代码" tabindex="-1"><a class="header-anchor" href="#runoob-ts-文件代码" aria-hidden="true">#</a> Runoob.ts 文件代码：</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token literal-property property">hello</span><span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码首先通过 <strong>tsc</strong> 命令编译：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>tsc Runoob<span class="token punctuation">.</span>ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>得到如下 js 代码：</p><h3 id="runoob-js-文件代码" tabindex="-1"><a class="header-anchor" href="#runoob-js-文件代码" aria-hidden="true">#</a> Runoob.js 文件代码：</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>varhello <span class="token operator">=</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后我们使用 node 命令来执行该 js 代码。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>node Runoob<span class="token punctuation">.</span>js  <span class="token comment">// 输出 Hello World</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>整个流程如下图所示：<br><img src="https://gyg-bawei-zg4-2103b.oss-cn-beijing.aliyuncs.com/e715952150dc8c53dc56fd2f7bd840b6.png" alt="image.png" loading="lazy"><br> 我们可以同时编译多个 ts 文件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>tsc file1<span class="token punctuation">.</span>ts file2<span class="token punctuation">.</span>ts file3<span class="token punctuation">.</span>ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="typescript-与面向对象" tabindex="-1"><a class="header-anchor" href="#typescript-与面向对象" aria-hidden="true">#</a> TypeScript 与面向对象</h2><p>面向对象是一种对现实世界理解和抽象的方法。<br> TypeScript 是一种面向对象的编程语言。<br> 面向对象主要有两个概念：对象和类。</p><ul><li><strong>对象</strong>：对象是类的一个实例（<strong>对象不是找个女朋友</strong>），有状态和行为。例如，一条狗是一 个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</li><li><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</li><li><strong>方法</strong>：方法是类的操作的实现步骤。</li></ul><p>下图中 <strong>girl、boy</strong> 为类，而具体的每个人为该类的对象：<br><img src="https://gyg-bawei-zg4-2103b.oss-cn-beijing.aliyuncs.com/30657b77a7aeefd32a1a378af76f82af.png" alt="image.png" loading="lazy"><br> TypeScript 面向对象编程实例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Site</span> <span class="token punctuation">{</span>
  <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Runoob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Site</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上实例定义了一个类 Site，该类有一个方法 name()，该方法在终端上输出字符串 Runoob。<br> new 关键字创建类的对象，该对象调用方法 name()。<br> 编译后生成的 JavaScript 代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> Site <span class="token operator">=</span> <span class="token doc-comment comment">/** <span class="token keyword">@class</span> */</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">Site</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token class-name">Site</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">name</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Runoob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Site<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Site</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行以上 JavaScript 代码，输出结果如下:</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>Runoob</p></div><h1 id="基本类型" tabindex="-1"><a class="header-anchor" href="#基本类型" aria-hidden="true">#</a> 基本类型</h1><h2 id="原数据类型" tabindex="-1"><a class="header-anchor" href="#原数据类型" aria-hidden="true">#</a> 原数据类型</h2><p>JavaScript 中的数据类型，可分为两类：</p><p>1、原始数据类型（Primitive Data Types），指的是不能再细分修改的数据类型，JavaScript 中有 6 种原始数据类型。</p><p>2、引用数据类型（Reference Data Types），存储多个值、或复杂对象数据类型，比如 object</p><p>咱们介绍 5 种原始数据类型在 typeScript 中的应用</p><ul><li>Boolean 布尔值</li><li>String 文本类型</li><li>Number   数字</li><li>Array   数组</li><li>Null 和 Undefined 空和未定义</li></ul><p>在定义类似时，通过 <code>:</code> 声明数据类型，如：</p><p>定义一个布尔值</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> c<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> d<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> e<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="特殊类型" tabindex="-1"><a class="header-anchor" href="#特殊类型" aria-hidden="true">#</a> 特殊类型</h2><h2 id="any-任意值" tabindex="-1"><a class="header-anchor" href="#any-任意值" aria-hidden="true">#</a> any (任意值)</h2><p>允许赋值给任意类型<br> 原则上在 typeScript 中不允许修改数据类型，咱们可以声明变量 any 类型，使数据为任意类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> e<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">&quot;yyds&quot;</span><span class="token punctuation">;</span>
e <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;any|e:&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型推断" tabindex="-1"><a class="header-anchor" href="#类型推断" aria-hidden="true">#</a> 类型推断</h2><p><strong>声明变量、未指定类型，默认是任意类型</strong></p><p>在定义变量时未赋值，会进行类型推断的规则，推断出下一个类型，最终为 any 类型，如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> something<span class="token punctuation">;</span>
something <span class="token operator">=</span> <span class="token string">&quot;seven&quot;</span><span class="token punctuation">;</span>
something <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>something<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打印输出 7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="联合类型" tabindex="-1"><a class="header-anchor" href="#联合类型" aria-hidden="true">#</a> 联合类型</h2><p>联合类型（union Types） 定义一个变量，可以接收多种类型的值</p><p>举个例子，假设你有一个名为 result 的变量，你希望它可以保存数字或者字符串类型的值。你可以这样声明它的类型：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> result<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在，result 变量可以存储数字类型的值，也可以存储字符串类型的值。例如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>result <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// 保存数字类型的值</span>
result <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 保存字符串类型的值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用联合类型，在类型声明中将这两种类型联合起来，表示该变量可以是其中任意一种类型。这就像是给变量指定了多个备选类型。</p>`,50),u=n("br",null,null,-1),d={href:"https://ts.xcatliu.com/introduction/what-is-typescript.html",target:"_blank",rel:"noopener noreferrer"},k=n("br",null,null,-1),v={href:"https://www.modb.pro/db/617658",target:"_blank",rel:"noopener noreferrer"},b=n("br",null,null,-1),m={href:"https://www.runoob.com/typescript/ts-basic-syntax.html",target:"_blank",rel:"noopener noreferrer"};function h(g,y){const a=p("ExternalLinkIcon");return o(),c("div",null,[r,n("p",null,[s("参考资料"),u,n("a",d,[s("https://ts.xcatliu.com/introduction/what-is-typescript.html"),e(a)]),k,n("a",v,[s("https://www.modb.pro/db/617658"),e(a)]),b,n("a",m,[s("https://www.runoob.com/typescript/ts-basic-syntax.html"),e(a)])])])}const j=t(l,[["render",h],["__file","uddiy4ty1tfry4vt.html.vue"]]);export{j as default};
