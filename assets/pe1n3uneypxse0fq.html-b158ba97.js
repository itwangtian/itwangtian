import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c,a as n,b as s,d as e,e as t}from"./app-9e7fdc48.js";const l={},r=n("blockquote",null,[n("p",null,"本文从两个方向出发：1、git 提交规范；2、代码风格统一")],-1),d=n("p",null,'假如团队中的小伙伴在提交代码时没有遵循规范要求，例如只写了一个"修改"或"更新，这会给团队中其他小伙伴造成困扰呢，不得不花时间查看代码和推测逻辑。',-1),u=n("p",null,"不仅会浪费了时间和精力，可能会导致以下问题：",-1),m=n("ol",null,[n("li",null,"可读性差"),n("li",null,"维护困难"),n("li",null,"变更历史不透明"),n("li",null,"自动化工具的不兼容")],-1),k=n("p",null,"如何统一代码风格，规范提交呢呢？ 推荐使用 ESLint + Prettier + husky + lint-staged",-1),v={href:"https://www.npmjs.com/package/eslint",target:"_blank",rel:"noopener noreferrer"},g=n("br",null,null,-1),h=n("br",null,null,-1),b={href:"https://www.npmjs.com/package/husky",target:"_blank",rel:"noopener noreferrer"},y=n("br",null,null,-1),q=n("br",null,null,-1),j={href:"https://www.npmjs.com/package/lint-staged",target:"_blank",rel:"noopener noreferrer"},f=n("br",null,null,-1),x=n("br",null,null,-1),_={href:"https://www.npmjs.com/package/prettier",target:"_blank",rel:"noopener noreferrer"},w=n("br",null,null,-1),z=n("br",null,null,-1),C={href:"https://www.npmjs.com/package/prettierrc",target:"_blank",rel:"noopener noreferrer"},S=n("br",null,null,-1),G=n("br",null,null,-1),E={href:"https://www.npmjs.com/package/eslint-config-prettier",target:"_blank",rel:"noopener noreferrer"},L=n("br",null,null,-1),W={href:"https://github.com/commitizen-tools/commitizen",target:"_blank",rel:"noopener noreferrer"},A=n("br",null,null,-1),N=n("br",null,null,-1),P={href:"https://www.npmjs.com/package/@commitlint/config-conventional",target:"_blank",rel:"noopener noreferrer"},T=n("br",null,null,-1),V=t(`<blockquote><p>如项目中未有.gitgnore 文件，建议先创建 Git 忽略提交文件：</p></blockquote><p>在项目跟目录创建一个 &quot;.gitignore&quot; 的文件来指定需要被忽略的文件或目录。<br> 以下是一个简单的例子</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code># git配置文件<span class="token operator">-</span>忽略提交文件
# <span class="token operator">**</span><span class="token operator">/</span>xx目录 忽略指定目录下的所有文件
<span class="token operator">**</span><span class="token operator">/</span>node_modules
<span class="token operator">**</span><span class="token operator">/</span><span class="token keyword">package</span><span class="token operator">-</span>lock<span class="token punctuation">.</span>json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="eslint" tabindex="-1"><a class="header-anchor" href="#eslint" aria-hidden="true">#</a> ESlint</h1><p>eslint 是一个代码检测工具，用于检测代码中潜在的问题和错误，作用提高代码质量和规范。</p><h2 id="安装步骤" tabindex="-1"><a class="header-anchor" href="#安装步骤" aria-hidden="true">#</a> 安装步骤：</h2><p>1、安装 eslint</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm install eslint
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、快速构建 eslint 配置文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm init @eslint<span class="token operator">/</span>config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参考如下 gif 操作：<br><img src="https://gyg-bawei-zg4-2103b.oss-cn-beijing.aliyuncs.com/0b3e67594365cd8d5f5778e312c262f9.gif" alt="" loading="lazy"><br> 执行完成后，自动生成 eslint 配置文件<code>.eslintrc.js</code><br> 可在 <code>.eslintrc.js</code> 中配置 rules 定义校验规则</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
         <span class="token literal-property property">indent</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 用于指定代码缩进的方式，这里配置为使用四个空格进行缩进。</span>
        <span class="token string-property property">&#39;linebreak-style&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;windows&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 用于指定换行符的风格，这里配置为使用 Windows 风格的换行符（\\r\\n）。</span>
        <span class="token literal-property property">quotes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;single&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 用于指定字符串的引号风格，这里配置为使用单引号作为字符串的引号。</span>
        <span class="token literal-property property">semi</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;always&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//用于指定是否需要在语句末尾添加分号，这里配置为必须始终添加分号。</span>
        <span class="token string-property property">&#39;@typescript-eslint/no-explicit-any&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;off&#39;</span><span class="token punctuation">]</span> <span class="token comment">// 用于配置 TypeScript 中的 &quot;any&quot; 类型的使用规则，这里配置为关闭禁止显式使用 &quot;any&quot; 类型的检查。</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="husky" tabindex="-1"><a class="header-anchor" href="#husky" aria-hidden="true">#</a> husky：</h1><p>husky 是一个 Git 钩子（Git hooks）工具，它可以让你在 Git 事件发生时执行脚本，进行代码格式化、测试等操作。</p><p>常见的钩子</p><ol><li>pre-commit：在执行提交操作之前触发。适合用于在提交代码之前运行代码检查、格式化等操作。</li><li>commit-msg：在提交消息（Commit Message）编写完成后触发。可用于验证提交消息的格式、添加自定义规范等。</li><li>pre-push：在执行推送操作之前触发。适合用于在推送代码前运行测试、构建或其他自动化流程。</li><li>pre-receive：在接收到推送操作之前触发。通常可用于在推送到远程仓库之前进行更严格的代码检查和验证。</li><li>prepare-commit-msg：在打开提交消息编辑器之前触发。可以用于自动生成提交消息、添加代码相关的信息等。</li><li>post-commit：在提交操作完成后触发。适合用于执行提交后的自动化流程、生成文档等。</li></ol><p>具体的使用步骤如下：</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><blockquote><p>注意！husky 是 git 项目的钩子函数，确保当前项目有 .git 配置文件，如没有 建议 git init 初始化</p></blockquote><ol><li>在项目根目录下运行以下命令安装 husky：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install husky --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>启用 git 钩子 输入以下命令</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm pkg <span class="token keyword">set</span> scripts<span class="token punctuation">.</span>prepare<span class="token operator">=</span><span class="token string">&quot;husky install&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装成功后会在 package.json 文件中 script 中生成命令</p><blockquote><p>注意！如为自动生成需手动添加，将以下内容粘贴到 package.json 文件中</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;prepare&quot;</span><span class="token operator">:</span> <span class="token string">&quot;husky install&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>创建<code>.husky</code>目录，执行如下代码</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm run prepare
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如图，执行成功后，项目中生成一个 .husky 目录<br><img src="https://gyg-bawei-zg4-2103b.oss-cn-beijing.aliyuncs.com/aa3a425e15083a3264975b2fadff6cf0.png" alt="image.png" loading="lazy"></p><blockquote><p>注意！如未生成 .husky 目录，推荐使用命令 <code>npx husky install</code></p></blockquote><h2 id="创建-git-挂钩" tabindex="-1"><a class="header-anchor" href="#创建-git-挂钩" aria-hidden="true">#</a> 创建 Git 挂钩</h2><h3 id="pre-commit" tabindex="-1"><a class="header-anchor" href="#pre-commit" aria-hidden="true">#</a> pre-commit</h3><p>在 Git 提交之前做<code>eslint</code> 语法校验 。</p><h4 id="_1、创建钩子脚本文件" tabindex="-1"><a class="header-anchor" href="#_1、创建钩子脚本文件" aria-hidden="true">#</a> 1、创建钩子脚本文件</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npx husky add <span class="token punctuation">.</span>husky<span class="token operator">/</span>pre<span class="token operator">-</span>commit <span class="token string">&quot;npm test&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,35),M=n("br",null,null,-1),O={href:"https://gyg-bawei-zg4-2103b.oss-cn-beijing.aliyuncs.com/5bfc5d37f2ce1a6d2443673fe92ee608.png",target:"_blank",rel:"noopener noreferrer"},B=t(`<blockquote><p>注意！<code>window</code>电脑输入后，可能会报错如下</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">Usage</span><span class="token operator">:</span>
  husky install <span class="token punctuation">[</span>dir<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">.</span>husky<span class="token punctuation">)</span>
  husky uninstall
  husky set<span class="token operator">|</span>add <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span> <span class="token punctuation">[</span>cmd<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方式，删除 &quot;npm test&quot; 重新执行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npx husky add <span class="token punctuation">.</span>husky<span class="token operator">/</span>commit<span class="token operator">-</span>msg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2、配置代码检测" tabindex="-1"><a class="header-anchor" href="#_2、配置代码检测" aria-hidden="true">#</a> 2、配置代码检测</h4><p>git 提交前，执行 pre-commit 钩子脚本，进行校验代码语法、格式修复等操作。</p><p>1、打开 pre-commit 文件，内容如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token hashbang comment">#!/usr/bin/env sh</span>
<span class="token punctuation">.</span> <span class="token string">&quot;$(dirname -- &quot;</span>$0<span class="token string">&quot;)/_/husky.sh&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2、下方代码添加到 pre-commit 文件中。<code>lint-staged</code>模块， 用于对 git 暂存区检测</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npx <span class="token operator">--</span>no<span class="token operator">-</span>install lint<span class="token operator">-</span>staged
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><code>npx --no-install lint-staged</code> 是一个命令，用于在不安装 lint-staged 的情况下运行该工具。<code>npx --no-install</code> 命令用于从远程下载并执行指定的命令。</p></blockquote><p>下一个章节会详细介绍 <code>lint-staged</code>的作用和使用步骤</p><h1 id="lint-staged" tabindex="-1"><a class="header-anchor" href="#lint-staged" aria-hidden="true">#</a> lint-staged</h1><ul><li>作用：lint-staged 可以让你在 Git 暂存（staged）区域中的文件上运行脚本，通常用于在提交前对代码进行格式化、静态检查等操作。</li><li>使用方式：你可以在项目中使用 lint-staged 配合 husky 钩子来执行针对暂存文件的脚本。具体的使用步骤如下：</li></ul><p>在项目根目录下运行以下命令安装 lint-staged：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install lint-staged --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 <code>package.json</code> 文件中添加以下配置：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// src/**/*.{js,jsx,ts,tsx} 校验暂存区、指定目录下的文件类型</span>
    <span class="token comment">// 校验命令，执行 eslint 、prettier</span>
    <span class="token property">&quot;src/**/*.{js,jsx,ts,tsx}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;prettier --write&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;eslint --fix&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>&quot;src/**/*.{js,jsx,ts,tsx}&quot;</code> 是指定要针对的暂存文件模式，你可以根据自己的项目需求来配置。</li><li><code>[&quot;prettier --write&quot;,&quot;eslint --fix&quot;]</code>为校验命令，可执行 eslint 、prettier 等规则</li></ul><h1 id="prettier" tabindex="-1"><a class="header-anchor" href="#prettier" aria-hidden="true">#</a> prettier</h1><p>prettier 是一个代码格式化工具。prettier 与上述 husky 和 lint-staged 搭配使用，可以在提交代码之前自动格式化代码。具体的使用步骤如下：</p><p>在项目根目录下运行以下命令安装 prettier：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install prettier --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建 <code>.prettierrc.js</code> 文件，并定义你想要的代码样式，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">semi</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//强制在语句末尾使用分号。</span>
  <span class="token literal-property property">trailingComma</span><span class="token operator">:</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">,</span> <span class="token comment">//不允许在多行结构的最后一个元素或属性后添加逗号。</span>
  <span class="token literal-property property">singleQuote</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//使用单引号而不是双引号来定义字符串。</span>
  <span class="token literal-property property">printWidth</span><span class="token operator">:</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token comment">//指定每行代码的最大字符宽度，超过这个宽度的代码将被换行</span>
  <span class="token literal-property property">tabWidth</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment">//指定一个制表符（Tab）等于多少个空格。</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25),D={href:"https://prettier.io/docs/en/options.html",target:"_blank",rel:"noopener noreferrer"},I=n("br",null,null,-1),R=n("code",null,'"prettier --write"',-1),Y=t(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// src/**/*.{js,jsx,ts,tsx} 校验暂存区、指定目录下的文件类型</span>
    <span class="token comment">// 校验命令，执行 eslint 、prettier</span>
    <span class="token property">&quot;src/**/*.{js,jsx,ts,tsx}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;prettier --write&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;eslint --fix&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样当你进行 GIT 提交操作时，lint-staged 将自动运行 prettier 来格式化符合规则的文件。</p><blockquote><p>prettier 如不集成 lint-staged 中，可单独执行重新校验<br><code>prettier --write [文件路径/模式]</code></p><ol><li>格式化单个文件：指定文件的完整路径，例如 prettier --write src/index.js。</li><li>格式化特定文件类型：使用文件模式匹配需要格式化的文件。例如，prettier --write &quot;src/*<em>/</em>.js&quot;会格式化 src 目录下的所有 JavaScript 文件。</li></ol></blockquote><h3 id="配置-ctrl-s-自动保存功能" tabindex="-1"><a class="header-anchor" href="#配置-ctrl-s-自动保存功能" aria-hidden="true">#</a> 配置 ctrl + s ，自动保存功能</h3><p>第一种，在 vscode 设置里面配置<br> 点击 Vscode 的设置=&gt;工作区=&gt;文本编辑器<br><img src="https://gyg-bawei-zg4-2103b.oss-cn-beijing.aliyuncs.com/268dad124034f5a656244577dfc24089.png" alt="image.png" loading="lazy"></p><h1 id="commitizen" tabindex="-1"><a class="header-anchor" href="#commitizen" aria-hidden="true">#</a> Commitizen</h1><p>是一个命令行工具，用于以一致的方式编写规范的提交消息。在使用 Commitizen 之前，你需要安装 Commitizen 及其适配器。</p><h2 id="cz-conventional-changelog" tabindex="-1"><a class="header-anchor" href="#cz-conventional-changelog" aria-hidden="true">#</a> cz-conventional-changelog</h2><p>是 Commitizen 的一个适配器，它实现了符合约定式提交（Conventional Commits）规范的提交消息。该规范定义了提交消息的格式和结构，并推荐了一些常用的提交类型和范围。</p><h2 id="安装和使用步骤" tabindex="-1"><a class="header-anchor" href="#安装和使用步骤" aria-hidden="true">#</a> 安装和使用步骤：</h2><p>1、确保你的项目已经初始化并安装了 npm 或 yarn。<br> 2、打开命令行终端，并在项目根目录下运行以下命令来安装 <code>commitizen</code> 和 <code>cz-conventional-changelog</code>：<br> 使用 npm：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install --save-dev commitizen cz-conventional-changelog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 yarn：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>yarn add <span class="token operator">--</span>dev commitizen cz<span class="token operator">-</span>conventional<span class="token operator">-</span>changelog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3、安装完成后，在 <code>package.json</code> 中添加一个 <code>config.commitizen</code> 的字段，并设置它的值为 <code>cz-conventional-changelog</code>。<br> 示例如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;config&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;commitizen&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cz-conventional-changelog&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>package.json</code> 中的 <code>scripts</code> 字段中添加一个 <code>commit</code> 的命令。<br> 示例如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;commit&quot;</span><span class="token operator">:</span> <span class="token string">&quot;git-cz&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、这将允许你使用 <code>npm run commit</code> 或 <code>yarn commit</code> 命令来进行交互式的提交。</p><p>现在，你可以使用 <code>npm run commit</code> 或 <code>yarn commit</code> 命令来进行提交。这将打开一个交互式的界面，引导你填写提交消息。</p><p><strong>案例如下：</strong><br> 1、提交修改文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>git add <span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、开始交互式提交，填写规范信息</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm run commit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3、选择提交类型</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">?</span> Select the type <span class="token keyword">of</span> change that you&#39;re committing<span class="token operator">:</span> <span class="token punctuation">(</span>Use arrow keys<span class="token punctuation">)</span>
<span class="token operator">&gt;</span> feat<span class="token operator">:</span>     <span class="token constant">A</span> <span class="token keyword">new</span> <span class="token class-name">feature</span> <span class="token comment">//新功能</span>
  <span class="token literal-property property">fix</span><span class="token operator">:</span>      <span class="token constant">A</span> bug fix <span class="token comment">//错误修复</span>
  <span class="token literal-property property">docs</span><span class="token operator">:</span>     Documentation only changes <span class="token comment">//仅文档更改</span>
  <span class="token literal-property property">style</span><span class="token operator">:</span>    <span class="token punctuation">[</span>样式<span class="token punctuation">]</span>Changes that <span class="token keyword">do</span> not affect the meaning <span class="token keyword">of</span> the <span class="token function">code</span> <span class="token punctuation">(</span>white<span class="token operator">-</span>space<span class="token punctuation">,</span> formatting<span class="token punctuation">,</span> missing semi<span class="token operator">-</span>colons<span class="token punctuation">,</span> etc<span class="token punctuation">)</span>
  <span class="token literal-property property">refactor</span><span class="token operator">:</span> <span class="token punctuation">[</span>重构<span class="token punctuation">]</span> <span class="token constant">A</span> code change that neither fixes a bug nor adds a feature
  <span class="token literal-property property">perf</span><span class="token operator">:</span>     <span class="token constant">A</span> code change that improves performance
  <span class="token literal-property property">test</span><span class="token operator">:</span>     Adding missing tests or correcting existing tests
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、根据提示填写内容，可选择空格跳过</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">?</span> What is the scope <span class="token keyword">of</span> <span class="token keyword">this</span> change <span class="token comment">// 此更改的范围是什么</span>
<span class="token operator">?</span> Write a short<span class="token punctuation">,</span> imperative tense description <span class="token keyword">of</span> the change<span class="token comment">//【必填】 简短的描述这个变化</span>
<span class="token operator">?</span> Provide a longer description <span class="token keyword">of</span> the change<span class="token comment">//提供变更的详细说明：</span>
<span class="token operator">?</span> Are there any breaking changes<span class="token operator">?</span> <span class="token comment">//有什么突破性的变化吗？【y/n】</span>
<span class="token operator">?</span> Does <span class="token keyword">this</span> change affect any open issues<span class="token operator">?</span> <span class="token punctuation">(</span>y<span class="token operator">/</span><span class="token constant">N</span><span class="token punctuation">)</span> <span class="token comment">//此更改是否会影响任何悬而未决的问题（是/否）</span>

<span class="token comment">// 完成提交，输出打印日志：</span>
<span class="token punctuation">[</span>master 2cf55e0<span class="token punctuation">]</span> docs<span class="token operator">:</span> 修改commitzen文档
 <span class="token number">1</span> file changed<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token function">insertions</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token function">deletions</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">)</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28),K=n("br",null,null,-1),Q=n("code",null,"cz-conventional-changelog",-1),U=n("br",null,null,-1),$=n("br",null,null,-1),J={href:"https://blog.csdn.net/fightingLKP/article/details/126695679",target:"_blank",rel:"noopener noreferrer"},X=t(`<h2 id="commitlint-可忽略" tabindex="-1"><a class="header-anchor" href="#commitlint-可忽略" aria-hidden="true">#</a> commitlint（可忽略）</h2><p>作用：Commitlint 是一个用于校验提交信息格式的工具。它通过定义一组规则来检查提交信息是否符合指定的约定，比如要求提交信息的首行必须以特定类型开头，自定义字符长度限制等。<br> 使用方式：在项目中配置 Commitlint 规则，然后在提交代码时，Commitlint 会自动校验提交信息是否符合规定的格式。</p><p>Commitlint 提供了一些常用的规则，用于检查和约束提交信息的格式和内容。以下是一些常用的 Commitlint 规则示例：<br> 先安装依赖</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm i @commitlint<span class="token operator">/</span>cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在项目根目录创建， commitlint.config.js 文件</p><ol><li><code>type-enum</code>: 检查提交消息的类型是否在预定义的列表中选择。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@commitlint/config-conventional&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;type-enum&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token string">&quot;always&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span><span class="token string">&quot;feat&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;fix&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;docs&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;chore&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;style&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;refactor&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;revert&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，规定了允许的提交类型为 <code>feat</code>, <code>fix</code>, <code>docs</code>, <code>chore</code>, <code>style</code>, <code>refactor</code>, <code>test</code>, <code>revert</code>。</p><ol start="2"><li><code>scope-enum</code>: 检查提交消息的作用域（scope）是否在预定义的列表中选择。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@commitlint/config-conventional&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;scope-enum&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;always&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;frontend&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;backend&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;database&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，规定了允许的作用域为 <code>frontend</code>, <code>backend</code>, <code>database</code>。</p><ol start="3"><li><code>subject-max-length</code>: 检查提交消息的主题部分（subject）的最大长度。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@commitlint/config-conventional&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;subject-max-length&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;always&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，规定了提交消息主题的最大长度为 100 个字符。</p><p>以上只是一些常用的 Commitlint 规则示例，你可以根据项目的需求进行自定义设置。在配置文件中，使用 <code>rules</code> 属性来定义规则，并根据需要设置规则的级别（0、1、2）、决策逻辑（&#39;always&#39;、&#39;never&#39;）和参数值（例如类型、最大长度等）。</p><h1 id="解决-eslint-和-prettier-冲突" tabindex="-1"><a class="header-anchor" href="#解决-eslint-和-prettier-冲突" aria-hidden="true">#</a> 解决 eslint 和 prettier 冲突</h1><p>有时，ESLint 的规则和 Prettier 的规则可能存在冲突，导致代码格式化不一致。使用 eslint-config-prettier 可以关闭 ESLint 中与 Prettier 冲突的规则。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm i  eslint<span class="token operator">-</span>config<span class="token operator">-</span>prettier eslint<span class="token operator">-</span>plugin<span class="token operator">-</span>prettier <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>eslint-config-prettier ：关闭 eslint 中与 prettier 相互冲突的规则。</li><li>eslint-plugin-prettier : 允许 eslint 用 prettier 格式化代码的能力。 安装依赖并修改.eslintrc 文件</li></ul><p>在 <code>.eslintrc.js</code> 文件中，在<code>extends</code>配置基础上，追加内容</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// .eslintrc</span>
<span class="token punctuation">{</span>
   <span class="token comment">//</span>
 <span class="token operator">-</span> <span class="token string">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;eslint:recommended&quot;</span><span class="token punctuation">]</span> <span class="token comment">// 原先配置</span>
 <span class="token operator">+</span> <span class="token string">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;eslint:recommended&quot;</span><span class="token punctuation">,</span>  <span class="token string">&quot;prettier&quot;</span><span class="token punctuation">]</span> <span class="token comment">// 添加配置</span>
  <span class="token comment">// 其余的配置</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同理，<code>plugins</code> 配置基础上，追加 <code>prettier</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;@typescript-eslint&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;react&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;prettier&quot;</span> <span class="token comment">// 添加prettier插件</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="常见报错" tabindex="-1"><a class="header-anchor" href="#常见报错" aria-hidden="true">#</a> 常见报错</h1><h2 id="typescript-eslint-dot-notation" tabindex="-1"><a class="header-anchor" href="#typescript-eslint-dot-notation" aria-hidden="true">#</a> @typescript-eslint/dot-notation</h2><h3 id="错误日志" tabindex="-1"><a class="header-anchor" href="#错误日志" aria-hidden="true">#</a> 错误日志：</h3><p>Error: Error while loading rule &#39;@typescript-eslint/dot-notation&#39;:<br> You have used a rule which requires parserServices to be generated. You must therefore provide a value for the &quot;parserOptions.project&quot; property for @typescript-eslint/parser.</p><h3 id="错误原因" tabindex="-1"><a class="header-anchor" href="#错误原因" aria-hidden="true">#</a> 错误原因：</h3><p>这个错误是由于在使用 @typescript-eslint/dot-notation 规则时，没有为 @typescript-eslint/parser 提供正确的 parserOptions.project 属性值引起的。</p><h3 id="解决方式" tabindex="-1"><a class="header-anchor" href="#解决方式" aria-hidden="true">#</a> 解决方式：</h3><p>eslint 配置文件中，设置一个有效的 parserOptions.project ，指向你的 TypeScript 配置文件（tsconfig.json）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">project</span><span class="token operator">:</span> <span class="token string">&#39;./tsconfig.json&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="typescript-eslint-uniquely" tabindex="-1"><a class="header-anchor" href="#typescript-eslint-uniquely" aria-hidden="true">#</a> @typescript-eslint&quot; uniquely.</h2><h3 id="错误日志-1" tabindex="-1"><a class="header-anchor" href="#错误日志-1" aria-hidden="true">#</a> 错误日志：</h3><p>ESLint couldn&#39;t determine the plugin &quot;@typescript-eslint&quot; uniquely.</p><h3 id="解决方式-1" tabindex="-1"><a class="header-anchor" href="#解决方式-1" aria-hidden="true">#</a> 解决方式:</h3><p>1、重新安装 eslint 相关依赖</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm cache clean <span class="token operator">--</span>force <span class="token comment">//先清除缓存依赖</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev eslint @typescript<span class="token operator">-</span>eslint<span class="token operator">/</span>eslint<span class="token operator">-</span>plugin @typescript<span class="token operator">-</span>eslint<span class="token operator">/</span>parser prettier eslint<span class="token operator">-</span>config<span class="token operator">-</span>prettier eslint<span class="token operator">-</span>plugin<span class="token operator">-</span>prettier
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、<code>.eslintrc.js</code> 文件，配置 root：true</p><blockquote><p>root 被设置为 true 时，ESLint 使用当前配置文件作为根配，将停止在父级目录中查找其他配置文件。<img src="https://gyg-bawei-zg4-2103b.oss-cn-beijing.aliyuncs.com/fc5536b74d92da34bf6d018c9a82cd25.png" alt="image.png" loading="lazy"></p></blockquote><h2 id="warning-react-version-not-specified" tabindex="-1"><a class="header-anchor" href="#warning-react-version-not-specified" aria-hidden="true">#</a> Warning: React version not specified</h2>`,42),F=n("br",null,null,-1),H={href:"https://github.com/jsx-eslint/eslint-plugin-react#configuration",target:"_blank",rel:"noopener noreferrer"},Z=n("br",null,null,-1),nn=n("code",null,".eslintrc.js",-1),sn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;settings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;react&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token string-property property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;detect&quot;</span> <span class="token comment">//detect 自动检测react版本</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function an(en,tn){const a=p("ExternalLinkIcon");return i(),c("div",null,[r,d,u,m,k,n("p",null,[s("1、eslint ("),n("a",v,[s("https://www.npmjs.com/package/eslint)"),e(a)]),s(")"),g,s(" 代码检测工具，检测并提示错误或警告信息"),h,s(" 2、 husky ("),n("a",b,[s("https://www.npmjs.com/package/husky)"),e(a)]),s(")"),y,s(" Git hooks 工具, 可以在执行 git 命令时，执行自定义的脚本程序"),q,s(" 3 、 lint-staged ("),n("a",j,[s("https://www.npmjs.com/package/lint-staged)"),e(a)]),s(")"),f,s(" 对暂存区 (git add) 文件执行脚本 检测 校验"),x,s(" 4、 prettier ("),n("a",_,[s("https://www.npmjs.com/package/prettier)"),e(a)]),s(")"),w,s(" 代码自动化格式化工具，更好的代码风格效果"),z,s(" 建议安装 -prettierc "),n("a",C,[s("https://www.npmjs.com/package/prettierrc"),e(a)]),S,s(" 快速生成 pretter 配置文件模板"),G,s(" 【eslint 和 prettier 冲突解决】eslint-config-prettier ("),n("a",E,[s("https://www.npmjs.com/package/eslint-config-prettier)"),e(a)]),s(")"),L,s(" 5、 Commitizen ("),n("a",W,[s("https://github.com/commitizen-tools/commitizen)"),e(a)]),s(")"),A,s(" 生成符合规范化提交信息的工具"),N,s(" 6、commitlint（"),n("a",P,[s("https://www.npmjs.com/package/@commitlint/config-conventional"),e(a)]),s("）"),T,s(" 定义提交规则， 并检测内容是否符合定义的规范！")]),V,n("p",null,[s("执执行成功，.husky 目录多出一个 pre-commit 文件"),M,s(" ![1G4XQYMS(L9"),n("a",O,[s("LGM9_NG}2)M.png"),e(a)])]),B,n("p",null,[s("这里的配置选项根据你的需求定义，具体选项可以参考 "),n("a",D,[s("prettier 文档"),e(a)]),s("。"),I,s(" 在 lint-staged 的配置中添加 "),R,s("，例如：")]),Y,n("p",null,[s("当你完成提交消息后，Commitizen 会自动生成符合规范的提交消息，并将其添加到 Git commit 中。"),K,s(" 根据 "),Q,s(" 的规范，提交消息需要包括类型（type）、范围（scope）、简短的描述（subject）和可选的详细描述（body）。"),U,s(" 参考"),$,n("a",J,[s("https://blog.csdn.net/fightingLKP/article/details/126695679"),e(a)])]),X,n("p",null,[s("使用了 eslint-plugin-react 插件，未在配置文件中指定 React 版本，会遇到下述警告信息。"),F,s(" Warning: React version not specified in eslint-plugin-react settings. See "),n("a",H,[s("https://github.com/jsx-eslint/eslint-plugin-react#configuration"),e(a)]),s(" ."),Z,s(" 在 "),nn,s("添加声明")]),sn])}const cn=o(l,[["render",an],["__file","pe1n3uneypxse0fq.html.vue"]]);export{cn as default};
