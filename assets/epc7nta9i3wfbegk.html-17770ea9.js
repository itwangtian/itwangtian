import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-6b52c1cf.js";const t={},p=e(`<h1 id="declare" tabindex="-1"><a class="header-anchor" href="#declare" aria-hidden="true">#</a> declare</h1><blockquote><p>类型补全</p></blockquote><p>declare 在 TypeScript 中的作用是声明全局变量、函数、类或模块的类型信息，而不需要提供具体实现</p><p>应用场景主要包括以下几个方面，解决相应的问题：</p><ol><li><code>与外部 JavaScript 代码交互</code>：当使用第三方 JavaScript 库时，使用 declare 可以声明该库的类型信息，让 TypeScript 在编写代码时提供类型检查和智能提示，避免类型错误。</li><li><code>引入缺少的类型声明</code>：当使用没有提供类型声明文件的 JavaScript 库时，通过 declare 手动声明其类型信息，以便享受 TypeScript 的类型检查和编辑器支持。</li><li><code>扩展全局对象的类型</code>：在 TypeScript 中，可以使用 declare 扩展全局对象的类型，添加或覆盖属性和方法，使其与实际情况匹配。</li></ol><p><strong>下面是几个使用 declare 的代码示例：</strong></p><ul><li>声明全局变量和函数：</li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">declare</span> <span class="token keyword">const</span> globalVar<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">globalFunc</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>globalVar<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">globalFunc</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>声明模块的类型信息：</li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;moduleName&quot;</span> <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">someFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">const</span> someVar<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> someFunc<span class="token punctuation">,</span> someVar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;moduleName&quot;</span><span class="token punctuation">;</span>
<span class="token function">someFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someVar<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>扩展全局对象类型：</li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">declare</span> global <span class="token punctuation">{</span>
  <span class="token keyword">interface</span> <span class="token class-name"><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token function">customMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> arr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">customMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>声明类的类型信息：</li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">declare</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
instance<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="d-ts-文件声明全局变量" tabindex="-1"><a class="header-anchor" href="#d-ts-文件声明全局变量" aria-hidden="true">#</a> .d.ts 文件声明全局变量</h1><p>在 TypeScript 中，<code>.d.ts</code> 文件被用于声明全局变量、函数、类等的类型信息，以补充缺失或不确定的类型定义。这些声明文件不需要被导出，而是被自动地包含在项目的类型检查过程中。</p><p>当你在一个模块文件中引入一个类型声明文件（<code>.d.ts</code> 文件），TypeScript 会自动识别并应用其中的类型信息。你可以直接在代码中使用声明文件中声明的类型，无需手动导入。</p><p>举个例子，假设你有一个名为 <code>globals.d.ts</code> 的声明文件，其中声明了一个全局变量：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">const</span> <span class="token constant">GLOBAL_VARIABLE</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在其他 TypeScript 文件中，你可以直接使用 <code>GLOBAL_VARIABLE</code> 而不需要显式导入它：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">GLOBAL_VARIABLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此处的类型推导会识别 GLOBAL_VARIABLE 的类型为 string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同样的规则也适用于其他类型的声明，如全局函数、全局类等。</p><p>需要注意的是，如果你使用的是第三方库的声明文件，通常你需要使用 <code>import</code> 或 <code>require</code> 语法导入该库的命名空间或模块，而不是直接使用声明文件中的类型。这是因为第三方库提供的声明文件通常会用命名空间或模块的方式导出类型，而不是全局声明。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p><code>.d.ts</code> 文件中的类型声明在 TypeScript 项目中会被自动包含，你可以直接在代码中使用这些类型，无需手动导出或导入。</p></div><h2 id="无法获取-d-ts-文件的类型" tabindex="-1"><a class="header-anchor" href="#无法获取-d-ts-文件的类型" aria-hidden="true">#</a> 无法获取<code>.d.ts</code> 文件的类型？</h2><p>如无法自动获取<code>.d.ts</code> 文件的类型，建议配置 <code>tsconfig.json</code> 文件，在编译打包时会自动将类型声明文件加入到编译，此时不用每次导出类型。</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
   <span class="token comment">//</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;type.d.ts&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//配置编译的文件</span>
  <span class="token string-property property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;src&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","epc7nta9i3wfbegk.html.vue"]]);export{r as default};
