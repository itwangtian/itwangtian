import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-f50fa1a8.js";const e={},p=t(`<h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h1><p>最近一直在调研图片上传阿里云 oss 功能，上篇文章主要讲述了阿里云 oss 大文件分片、断点续传。这篇文章是在原有基础上，前端加了图片剪裁、后端加了本地存储功能。</p><p>先看效果<br><img src="https://gyg-bawei-zg4-2103b.oss-cn-beijing.aliyuncs.com/25fe98ae60b1fe13a9957fc6db91bc6a.gif" alt="图片剪裁上传 -original-original.gif" loading="lazy"><br> 技术栈</p><ol><li>前端：<code>react+Ts+antd</code></li><li>后端：<code>node+koa+koa-body+ali-oss</code></li></ol><p>功能</p><ol><li>图片剪裁（<code>antd剪裁组件</code>）</li><li>本地文件上传（<code>antd上传组件+axios</code>）</li><li>文件存储本地（<code>node+koa-body</code>）</li><li>文件存储阿里 oss（<code>node+ali-oss</code>）</li></ol><h1 id="核心代码" tabindex="-1"><a class="header-anchor" href="#核心代码" aria-hidden="true">#</a> 核心代码</h1><h2 id="环境配置" tabindex="-1"><a class="header-anchor" href="#环境配置" aria-hidden="true">#</a> 环境配置</h2><h3 id="引入依赖环境" tabindex="-1"><a class="header-anchor" href="#引入依赖环境" aria-hidden="true">#</a> 引入依赖环境</h3><p>使用 koa 搭建 node 服务，搭配 koa 周边依赖包开发起来更方便，详细依赖环境如下：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;koa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// koa</span>
<span class="token keyword">const</span> <span class="token constant">router</span> <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;koa-Router&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// koa 路由</span>
<span class="token keyword">const</span> <span class="token constant">cors</span> <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;@koa/cors&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 运行koa中跨域</span>
<span class="token keyword">const</span> <span class="token constant">OSS</span> <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ali-oss&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 阿里云oss-sdk</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>koaBody<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;koa-body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理请求体中间件、用于解析json、表单 | 包含file内容请求，会生成临时文件,将文件信息添加到ctx.request对象属性，通过ctx.request.files获取</span>
<span class="token keyword">const</span> <span class="token constant">path</span> <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对文件路径的操作</span>
<span class="token keyword">const</span> <span class="token constant">staticServe</span> <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;koa-static&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 使上传的文件能在浏览器中访问</span>
<span class="token keyword">const</span> <span class="token constant">fs</span> <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;fs&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 文件的读写操作</span>
<span class="token keyword">const</span> <span class="token constant">PORT</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;9000&#39;</span> <span class="token comment">// 端口</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置阿里云-oss" tabindex="-1"><a class="header-anchor" href="#配置阿里云-oss" aria-hidden="true">#</a> 配置阿里云 oss</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSS</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// yourregion填写Bucket所在地域。以华东1（杭州）为例，Region填写为oss-cn-hangzhou。</span>
  <span class="token literal-property property">region</span><span class="token operator">:</span> <span class="token string">&quot;oss-cn-beijing&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 阿里云账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM用户进行API访问或日常运维，请登录RAM控制台创建RAM用户。</span>
  <span class="token literal-property property">accessKeyId</span><span class="token operator">:</span> <span class="token string">&quot;xxx&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">accessKeySecret</span><span class="token operator">:</span> <span class="token string">&quot;xx&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 填写Bucket名称。</span>
  <span class="token literal-property property">bucket</span><span class="token operator">:</span> <span class="token string">&quot;xxx&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用中间件" tabindex="-1"><a class="header-anchor" href="#使用中间件" aria-hidden="true">#</a> 使用中间件</h3><p>实现本地上传、解决跨域等功能，需使用 koa 中间件完成功能</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// __dirname node中全局变量，当前文件所在目录</span>
<span class="token comment">// 上传本地目录</span>
<span class="token keyword">const</span> <span class="token constant">UPLOAD_PATH</span> <span class="token operator">=</span> path<span class="token operator">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string single-quoted-string">&#39;public/&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 上传文件后的地址，用于拼接图片名称，回显前端</span>
<span class="token keyword">const</span> <span class="token constant">UPLOAD_URL</span> <span class="token operator">=</span> <span class="token string backtick-quoted-string">\`http://localhost:\${PORT}\`</span>
<span class="token comment">//  使用跨域中间件</span>
app<span class="token operator">.</span><span class="token keyword">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">//应用koabody中间件，处理文件上传操作，生成临时文件路径</span>
app<span class="token operator">.</span><span class="token keyword">use</span><span class="token punctuation">(</span><span class="token function">koaBody</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    multipart<span class="token punctuation">:</span><span class="token constant boolean">true</span> <span class="token punctuation">,</span><span class="token comment">// 解析文件格式内容</span>
    formidable<span class="token punctuation">:</span><span class="token punctuation">{</span>
        <span class="token comment">// 上传文件的存储的位置</span>
        uploadDir<span class="token punctuation">:</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">,</span>
        <span class="token argument-name">keepExtensions</span><span class="token punctuation">:</span><span class="token constant boolean">true</span> <span class="token comment">// 保留文件的扩展名</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// app.use(bodyParser());</span>
app<span class="token operator">.</span><span class="token keyword">use</span><span class="token punctuation">(</span><span class="token function">staticServe</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
app<span class="token operator">.</span><span class="token keyword">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 启动服务</span>
app<span class="token operator">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token constant">PORT</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token operator">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;启动成功 9000&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="阿里云分片上传" tabindex="-1"><a class="header-anchor" href="#阿里云分片上传" aria-hidden="true">#</a> 阿里云分片上传</h2><h3 id="接口代码" tabindex="-1"><a class="header-anchor" href="#接口代码" aria-hidden="true">#</a> 接口代码</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/upload_oss&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;请求了&quot;</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>files<span class="token punctuation">.</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;上传oss upload_oss&quot;</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> file <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>files<span class="token punctuation">.</span>file<span class="token punctuation">;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">multipartUpload</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;请求成功了&quot;</span><span class="token punctuation">,</span>
    result<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分片操作" tabindex="-1"><a class="header-anchor" href="#分片操作" aria-hidden="true">#</a> 分片操作</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 上传进度</span>
<span class="token keyword">const</span> <span class="token function-variable function">progress</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> _checkpoint</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Object的上传进度。</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;分片进度&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 分片上传的断点信息。</span>
  <span class="token comment">// console.log(_checkpoint);</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">multipartUpload</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 依次填写Object完整路径（例如exampledir/exampleobject.txt）和本地文件的完整路径（例如D:\\\\localpath\\\\examplefile.txt）。Object完整路径中不能包含Bucket名称。</span>
    <span class="token comment">// 如果本地文件的完整路径中未指定本地路径（例如examplefile.txt），则默认从示例程序所属项目对应本地路径中上传文件。</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">multipartUpload</span><span class="token punctuation">(</span>
      file<span class="token punctuation">.</span>originalFilename<span class="token punctuation">,</span>
      file<span class="token punctuation">.</span>filepath<span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        progress<span class="token punctuation">,</span> <span class="token comment">// 如无需进度实时回显，可不配置</span>
        <span class="token comment">// headers,</span>
        <span class="token comment">// 指定meta参数，自定义Object的元信息。通过head接口可以获取到Object的meta数据。</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 捕获超时异常。</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;捕获超时异常。&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="本地文件上传" tabindex="-1"><a class="header-anchor" href="#本地文件上传" aria-hidden="true">#</a> 本地文件上传</h2><h3 id="存储本地文件两种方式" tabindex="-1"><a class="header-anchor" href="#存储本地文件两种方式" aria-hidden="true">#</a> 存储本地文件两种方式</h3><h4 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h4><p>一、renameSync（移动临时文件）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">renameSync</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>files<span class="token punctuation">.</span>file<span class="token punctuation">.</span>filepath<span class="token punctuation">,</span> filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>优点</code>：直接使用 fs.renameSync，一次操作即可重命名或移动文件，非常简洁和高效。<br><code>缺点</code>：fs.renameSync 是一个同步方法，会直接阻塞代码执行，直到文件操作完成</p><h4 id="二、创建文件流存储" tabindex="-1"><a class="header-anchor" href="#二、创建文件流存储" aria-hidden="true">#</a> 二、创建文件流存储</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> reader <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>files<span class="token punctuation">.</span>file<span class="token punctuation">.</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> writer <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
reader<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>writer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>优点</code>：可以同时处理多个文件的上传，不会阻塞代码执行。<br><code>缺点</code>：在处理单个文件时可能略微复杂。</p><h4 id="renamesync-存储单文件" tabindex="-1"><a class="header-anchor" href="#renamesync-存储单文件" aria-hidden="true">#</a> renameSync 存储单文件</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 请求中的第二个参数是请求中间件函数，可用于请求前的业务操作</span>
router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>
  <span class="token string">&quot;/upload_local&quot;</span><span class="token punctuation">,</span>
  <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> filePath <span class="token operator">=</span>
      <span class="token constant">UPLOAD_PATH</span> <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>files<span class="token punctuation">.</span>file<span class="token punctuation">.</span>originalFilename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    fs<span class="token punctuation">.</span><span class="token function">renameSync</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>files<span class="token punctuation">.</span>file<span class="token punctuation">.</span>filepath<span class="token punctuation">,</span> filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;请求成功了&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">imgUrl</span><span class="token operator">:</span> <span class="token constant">UPLOAD_URL</span> <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>files<span class="token punctuation">.</span>file<span class="token punctuation">.</span>originalFilename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h1><h2 id="multer-存储文件名乱码怎么办" tabindex="-1"><a class="header-anchor" href="#multer-存储文件名乱码怎么办" aria-hidden="true">#</a> multer 存储文件名乱码怎么办？</h2><p>在第一版代码中，采用的是 multer 存储文件，上传文件是中文命名，multer 中无法解析格式，导致文件名乱码。<br> 解决方式：将使用 Latin-1 编码的文件名转换为 UTF-8 编码<br> 示例代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 文件名称命名</span>
    <span class="token function-variable function">filename</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>file<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;文件名称命名&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> decodedName <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>originalname<span class="token punctuation">,</span> <span class="token string">&quot;latin1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>
            <span class="token string">&quot;utf8&quot;</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;decodedName&#39;</span><span class="token punctuation">,</span>decodedName<span class="token punctuation">)</span>
        <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>decodedName<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Buffer.from(file.originalname, &quot;latin1&quot;)</code>使用 Buffer.from 方法将以 Latin-1 编码的 file.originalname 字符串转换为一个 Buffer 对象。Latin-1 是一种字符编码，也称为 ISO-8859-1。<br><code>toString(&quot;utf8&quot;)</code>使用 toString 方法将 Buffer 对象转换回字符串，指定目标编码为 UTF-8。这将将 Latin-1 编码的字符串转换为 UTF-8 编码的字符串。</p><h2 id="koa-接收不到-file-对象内容" tabindex="-1"><a class="header-anchor" href="#koa-接收不到-file-对象内容" aria-hidden="true">#</a> Koa 接收不到 file 对象内容</h2><p>正常情况下，引入 koa-body 中间件后，可以获取到前端表单数据，如下：<br><img src="https://gyg-bawei-zg4-2103b.oss-cn-beijing.aliyuncs.com/53ec54d23408d6328f887b83b2f0b604.png" alt="image.png" loading="lazy"><br><strong>如果获取不到，大概率是 routes 代码书写顺序错乱导致</strong><br><strong>⚠ 中间件的应用需要写在 routes 前面才可以</strong><br> 正常执行顺序如下：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">const</span> koaBody  <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;koa-body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>multipart<span class="token punctuation">:</span> <span class="token constant boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token operator">.</span><span class="token keyword">use</span><span class="token punctuation">(</span>koaBody<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//中间件的应用需要写在routes前面才可以</span>
app<span class="token operator">.</span><span class="token keyword">use</span><span class="token punctuation">(</span>router<span class="token operator">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="koa-body-和-koa-bodypaser-不兼容" tabindex="-1"><a class="header-anchor" href="#koa-body-和-koa-bodypaser-不兼容" aria-hidden="true">#</a> koa-body 和 koa-bodypaser 不兼容</h2><p>在第一版代码中，使用 <code>koa-bodypaser + multer</code>来存储本地文件，<code>koa-body+ali-oss </code>上传阿里云存储。</p><p>这两个功能单独使用是没有问题，但是服务端同时定义两个接口，则会出现阿里云 oss 或本地存储失败。百度搜了一圈没找到解决方案，最终果断弃坑<code> multer</code>， 使用<code>koa-body</code> 来解析请求体内容.</p><p><code>koa-body</code>不仅可以解析请求体内容、还可以生产文件临时路径、方便存储操作</p><blockquote><ul><li>koa-body 用于解析 请求中的 formData 文件内容格式、 json、buffer</li><li>koa-bodypaser 用于解析 非文件内容数据，比如 json、表单</li><li>如果 node 业务中涉及 以上两种情况下，建议使用 koa-body。</li></ul></blockquote>`,45),o=[p];function c(i,l){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","xtgxqhiyw52hvk3r.html.vue"]]);export{k as default};
