import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,e}from"./app-e2fbee63.js";const t={},p=e(`<h1 id="tsconfig-json-ts-配置文件" tabindex="-1"><a class="header-anchor" href="#tsconfig-json-ts-配置文件" aria-hidden="true">#</a> tsconfig.json (Ts 配置文件)</h1><p><code>tsconfig.json</code> 是 ts 项目中配置文件。在项目根目录，如果项目中有 <code>tsconfig.json</code>, <code>TypeScript</code>   则认为这是项目的根目录。</p><p>如果项目源码是 <code>JavaScript</code>，但是相用 <code>typescript</code> 处理，那配置文件的名字是<code>jsconfig.json</code> ,和 <code>tsconfig</code> 的写法一样。</p><h2 id="指定-tsconfig-json-目录" tabindex="-1"><a class="header-anchor" href="#指定-tsconfig-json-目录" aria-hidden="true">#</a> 指定 <code>tsconfig.json</code> 目录</h2><p>命令行参数--project 或-p 可以指定 tsconfig.json 的位置（目录或文件皆可）。</p><p>如果不指定 <code>tsconfig.json</code>, <code>tsc</code> 会在当前目录搜索 <code>tsconfig.json</code> 文件，如果不存在，就到上一级目录搜索，直到找到为止。</p><p><code>tsconfig.json</code> 文件格式，是一个 JSON 对象，简单到只可以放一个空对象 <code>{}</code>, 示例如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;compilerOptions&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token string-property property">&quot;outDir&quot;</span><span class="token operator">:</span><span class="token string">&quot;./built&quot;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;allowJs&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;target&quot;</span><span class="token operator">:</span><span class="token string">&quot;es5&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;include&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;./src/**/*&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>tsconfig.json</code> 文件中有很多属性，这样简单说下上面四个属性的含义</p><ul><li><code>outDir</code> 指定编译文件存放的目录</li><li><code>allowJs</code> 指定源目录的 <code>JavaScript</code> 文件是否原样拷贝到编译后的目录</li><li><code>target</code> 指定编译产物的 js 版本</li><li><code>include</code> 指定那些文件需要编译</li></ul><p><code>tsconfig.json</code> 文件可以不必手写，使用 tsc 命令的 <code>--init</code> 参数自动生成</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>tsc <span class="token operator">--</span>init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="tsconfig-一级属性" tabindex="-1"><a class="header-anchor" href="#tsconfig-一级属性" aria-hidden="true">#</a> tsconfig 一级属性</h1><p>tsconfig.json 的一级属性并不多，只有很少几个，但是 compilerOptions 属性有很多二级属性。</p><p>先介绍下一级属性</p><h2 id="_1、include" tabindex="-1"><a class="header-anchor" href="#_1、include" aria-hidden="true">#</a> 1、include</h2><p><code>include</code> 属性指定所要编译的文件列表，既支持逐一列出文件，也支持通配符。文件位置相对于当前配置文件而定。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/**/*&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tests/**/*&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>include 属性支持三种通配符。</p><ul><li>?：指代单个字符</li><li>*：指代任意字符，不含路径分隔符</li><li>**：指定任意目录层级。</li></ul><p>如果不指定文件后缀名，默认包括.ts、.tsx 和.d.ts 文件。如果打开了 allowJs，那么还包括.js 和.jsx。</p><h2 id="_2、exclude" tabindex="-1"><a class="header-anchor" href="#_2、exclude" aria-hidden="true">#</a> 2、exclude</h2><p><code>exclude</code> 属性是一个数组，必须与 <code>include</code> 属性一起使用，用来从编译列表中去除指定的文件，同样支持和 <code>include</code> 属性相同的通配符。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;include&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 指定那些文件需要编译</span>
    <span class="token string-property property">&quot;exclude&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;**/*.spec.ts&quot;</span><span class="token punctuation">]</span> <span class="token comment">// 从编译列表中去除指定文件</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、extends" tabindex="-1"><a class="header-anchor" href="#_3、extends" aria-hidden="true">#</a> 3、extends</h2><p>如果一个项目有多个配置文件，可以将共同的配置写在 <code>tsconfig.base.json</code> <code>tsconfig.json</code> 可以继承另一个 <code>tsconfig.json</code> 文件的配置,这样方便维护。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;extends&quot;</span><span class="token operator">:</span><span class="token string">&quot;../tsconfig.base.json&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 <code>extends</code> 属性指定的路径如不是以<code>./</code> 或者 <code>../</code>开头，那么编译器将在<code>node_modules</code> 目录下查找指定的配置文件。</p><p><code>extends</code> 属性也可也继承已发布的 npm 模块里面的 tsconfig 文件</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;extends&quot;</span><span class="token operator">:</span><span class="token string">&quot;@tsconfig/node12/tsconfig.json&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>extends</code> 指定的 <code>tsconfig.json</code> 会先加载，然后加载当前的 <code>tsconfig.json</code> 。如果两者有重名的属性，后者会覆盖前者。</p><h2 id="_4、files" tabindex="-1"><a class="header-anchor" href="#_4、files" aria-hidden="true">#</a> 4、files</h2><p><code>files</code> 属性指定编译的文件列表，如果其中一个文件不存在，就会报错。<br> 它是一个数组，排在前面的文件先编译。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;files&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;a.ts&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;b.ts&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该属性必须逐一列出文件，不支持文件匹配，如果文件比较多建议使用 <code>include</code> 和 <code>exclude</code> 属性。</p><h2 id="_5、references" tabindex="-1"><a class="header-anchor" href="#_5、references" aria-hidden="true">#</a> 5、references</h2><p><code>references</code> 属性是一个数组，数组成员为对象，适合一个大项目由多个小项目构成的情况，用来设置需要引用的底层项目。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>    <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;references&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>
            <span class="token punctuation">{</span><span class="token string-property property">&quot;path&quot;</span><span class="token operator">:</span><span class="token string">&quot;../pkg1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token string-property property">&quot;path&quot;</span><span class="token operator">:</span><span class="token string">&quot;../pkg2/tsconfig.json&quot;</span><span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="lesson-1-实战" tabindex="-1"><a class="header-anchor" href="#lesson-1-实战" aria-hidden="true">#</a> lesson 1 实战</h1><ol><li><ol><li>使用 create-react-app project --template typescript 创建脚手架</li></ol></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> create<span class="token operator">-</span>react<span class="token operator">-</span>app project <span class="token operator">--</span>template typescript
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><ol start="2"><li>正确生成 tsConfig.json 文件 tsc --init</li></ol></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>tsc <span class="token operator">--</span>init <span class="token comment">// 使用上面脚手架创建后，项目中自动生成tsconfig.json 文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li><ol start="3"><li>正确配置打包 dist 命令</li></ol></li></ol><p>先创建 config 配置目录，输入以下命令</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm eject
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打开 config 目录，config/paths.js 更改打包目录为 dist<br><img src="https://gyg-bawei-zg4-2103b.oss-cn-beijing.aliyuncs.com/26df3f464b8fe8c706df4513b0503171.png" alt="image.png" loading="lazy"></p><ol start="4"><li><ol start="4"><li>正确配置 ts 文件监听</li></ol></li></ol><figure><img src="https://gyg-bawei-zg4-2103b.oss-cn-beijing.aliyuncs.com/bde677ce7b67a9addfb9d298b528afd0.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><ol start="5"><li><ol start="5"><li>配置打包出口文件</li></ol></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 如上和第三题一样</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="6"><li><ol start="6"><li>配置 incloude 以及 excloude</li></ol></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;include&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;src/**/*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//指定所要编译的文件列表</span>
  <span class="token string-property property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;**/*.spec.ts&quot;</span><span class="token punctuation">]</span><span class="token comment">//从编译列表中去除指定的文件</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li><ol start="7"><li>用 ts 语法声明一个枚举示例</li></ol></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">enum</span> user<span class="token punctuation">{</span>
  age<span class="token punctuation">,</span>
  name<span class="token punctuation">,</span>
  sex
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="8"><li><ol start="8"><li>定义类型不可使用 any；</li></ol></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 不要用any any any！！！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="9"><li><ol start="9"><li>写出 ts 的基础类型 以及 ts 新增类型 写明注释</li></ol></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 布尔值</span>
<span class="token keyword">let</span> <span class="token literal-property property">isDone</span><span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token comment">// 数字</span>
<span class="token keyword">let</span> <span class="token literal-property property">decLiteral</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token literal-property property">hexLiteral</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0xf00d</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token literal-property property">binaryLiteral</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0b1010</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token literal-property property">octalLiteral</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0o744</span><span class="token punctuation">;</span>

<span class="token comment">// 字符串</span>
<span class="token keyword">let</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Gene</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token literal-property property">sentence</span><span class="token operator">:</span> string <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token comment">// 数组</span>
<span class="token keyword">let</span> <span class="token literal-property property">list</span><span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token literal-property property">list</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 数组泛型，Array&lt;元素类型&gt;</span>

<span class="token comment">// 元组 Tuple</span>
<span class="token keyword">let</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> number<span class="token punctuation">]</span><span class="token punctuation">;</span>
x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="10"><li><ol start="10"><li>自行定义 ts 的元组类型</li></ol></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义一个具有固定长度为2的元组类型</span>
type MyTuple <span class="token operator">=</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> number<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 声明一个变量并指定其类型为自定义的元组类型</span>
<span class="token keyword">let</span> <span class="token literal-property property">myTuple</span><span class="token operator">:</span> MyTuple<span class="token punctuation">;</span>

<span class="token comment">// 初始化元组变量</span>
myTuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 正确</span>
myTuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="11"><li><ol start="11"><li>实现元组数据存在多种类型的定义</li></ol></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//myTuple 是一个包含三个元素的元组。第一个元素的类型是 number，第二个元素的类型是 string，第三个元素的类型是 boolean。</span>
<span class="token keyword">let</span> <span class="token literal-property property">myTuple</span><span class="token operator">:</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> string<span class="token punctuation">,</span> boolean<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="12"><li><ol start="12"><li>简单实现去重效果[1,1,1,2,2,2,3]=&gt;[1,2,3]</li></ol></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 最快速去重 new set() ,注意 set只能去除基本类型，无法去重引用类型，如对象，因为应用类型值相同无法去重</span>

<span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="13"><li><ol start="13"><li>正确实现函数调用且正确给出函数返回值的类型</li></ol></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="14"><li><ol start="14"><li>正确实现效果无 bug；</li></ol></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>不要出bug！！！！！
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="15"><li><ol start="15"><li>添加必要的思路注释</li></ol></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>记得写下代码注释，比如声明一个包含xx类型的数据结构
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="16"><li><ol start="16"><li>录制效果视频正确讲解并标黄；</li></ol></li></ol>`,72),o=[p];function l(i,c){return n(),a("div",null,o)}const d=s(t,[["render",l],["__file","gixzk15x3uz194ir.html.vue"]]);export{d as default};
