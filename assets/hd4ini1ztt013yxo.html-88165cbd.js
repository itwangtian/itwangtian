import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-21789e9f.js";const p={},t=e(`<p>在 TypeScript 中，<code>type</code> 关键字用于创建类型别名（Type Aliases）。类型别名允许你为一个具体的类型或类型组合定义一个名称，以便在代码中重复使用。</p><p><code>type</code> 的作用有以下几个方面：</p><ol><li><strong>类型复用：</strong> 通过类型别名，你可以将一个复杂的类型定义为一个名称，然后在需要使用该类型的地方直接使用该名称。这有助于提高代码的可读性和可维护性。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> User<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span>callback<span class="token operator">:</span> Callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，通过类型别名 <code>User</code> 和 <code>Callback</code> 分别定义了一个用户对象类型和一个回调函数类型，然后在 <code>fetchData</code> 函数中使用了这两个类型别名。</p><ol start="2"><li><strong>类型组合：</strong> 类型别名还可以用于组合现有的类型来创建新的类型。这可以通过交叉类型（Intersection Types）和联合类型（Union Types）来实现。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Point</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Color</span> <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;green&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">ColoredPoint</span> <span class="token operator">=</span> Point <span class="token operator">&amp;</span> <span class="token punctuation">{</span> color<span class="token operator">:</span> Color <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Shape</span> <span class="token operator">=</span> Square <span class="token operator">|</span> Circle<span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">Square</span> <span class="token punctuation">{</span>
  kind<span class="token operator">:</span> <span class="token string">&quot;square&quot;</span><span class="token punctuation">;</span>
  size<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>
  kind<span class="token operator">:</span> <span class="token string">&quot;circle&quot;</span><span class="token punctuation">;</span>
  radius<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，<code>ColoredPoint</code> 类型通过交叉类型将 <code>Point</code> 类型和包含 <code>color</code> 属性的对象类型组合而成，<code>Shape</code> 类型通过联合类型将 <code>Square</code> 和 <code>Circle</code> 接口组合而成。</p><ol start="3"><li><strong>类型推导（Type Inference）：</strong> 当你使用类型别名初始化变量时，TypeScript 可以推导变量的类型，并将其视为该类型别名所代表的类型。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Point</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> origin<span class="token operator">:</span> Point <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，通过类型别名 <code>Point</code> 定义了一个坐标点类型，然后通过赋值给 <code>origin</code> 变量，TypeScript 推导出 <code>origin</code> 的类型为 <code>Point</code>。</p><p>类型别名的使用使得 TypeScript 中的类型定义更加灵活和可维护。通过使用类型别名，你可以更好地组织和管理代码中的复杂类型，提高代码的可读性和可维护性。</p><p>此外，类型别名还可以与其他 TypeScript 的高级类型特性（如泛型、条件类型等）结合使用，进一步增强类型系统的能力。</p><h2 id="type-vs-interface" tabindex="-1"><a class="header-anchor" href="#type-vs-interface" aria-hidden="true">#</a> type vs interface</h2><h2 id="表示类型" tabindex="-1"><a class="header-anchor" href="#表示类型" aria-hidden="true">#</a> 表示类型</h2><p><code>类型别名（type）</code>是一个定义别名的工具，可以将多个类型组合起来形成一个新类型。比如特定的对象结构，联合类型、函数类型等、<strong>可以表示非对象类型</strong></p><p>可以应用于以下数据类型：</p><ul><li>基本类型（如字符串、数字、布尔值等）</li><li>联合类型（Union Types）</li><li>交叉类型（Intersection Types）</li><li>元组（Tuple）</li><li>函数类型（Function Types）</li><li>对象类型（Object Types）</li><li>类型字面量（Type Literals）</li><li>类型别名的自身引用（Recursive Type Aliases）</li></ul><p><code>接口（interface）</code>主要用于定义对象的形状和结构，<strong>只能表示对象类型</strong></p><ul><li>对象类型（Object Types）</li><li>类类型（Class Types）</li></ul><h2 id="继承状态" tabindex="-1"><a class="header-anchor" href="#继承状态" aria-hidden="true">#</a> 继承状态</h2><ol><li>type 不可继承</li><li>interface 可以继承 class 、interface、type</li></ol>`,22),o=[t];function c(i,l){return s(),a("div",null,o)}const u=n(p,[["render",c],["__file","hd4ini1ztt013yxo.html.vue"]]);export{u as default};
