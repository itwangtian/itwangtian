import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as c,c as o,a,b as s,d as e,e as t}from"./app-510708ee.js";const r={},l=a("h1",{id:"js-vs-ts",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#js-vs-ts","aria-hidden":"true"},"#"),s(" Js VS Ts")],-1),d=a("p",null,[s("分享一个学习编程的小诀窍，我屡试不爽，效果很赞呢！"),a("br"),s(" 是什么呢？ 就是**对比，**用积累的知识和经验，与新的概念和知识对比联系，能帮助加深理解和记忆，并促进应用和内化。"),a("br"),s(" 为了更好的学习效果，咱们以对比的形式、了解和认识 typeScript。下面从定义、优势、应用场景这三个角度，逐个介绍。")],-1),u=a("blockquote",null,[a("p",null,"所以，在读这篇文章时，建议你有一定的 JavaScript 基础。")],-1),h=a("h2",{id:"定义",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#定义","aria-hidden":"true"},"#"),s(" 定义")],-1),v=a("code",null,"JavaScript",-1),b={href:"https://www.yuque.com/nh0s08/ycsiao/nfknzexbccraar99?singleDoc=&view=doc_embed",target:"_blank",rel:"noopener noreferrer"},k=a("br",null,null,-1),m=a("code",null,"TypeScript",-1),g={href:"https://www.yuque.com/nh0s08/ycsiao/bf2pmua2hv1623o9?singleDoc=&view=doc_embed",target:"_blank",rel:"noopener noreferrer"},y=t(`<h2 id="优势" tabindex="-1"><a class="header-anchor" href="#优势" aria-hidden="true">#</a> 优势：</h2><p><code>JavaScript</code>的优势：</p><ol><li>广泛的支持和使用：JavaScript 是 Web 开发的标准语言，在浏览器中直接执行，无需编译。</li><li>灵活性：JavaScript 的动态类型使得在开发过程中更加灵活，可以快速迭代和修改代码。</li><li>生态系统：JavaScript 有庞大的开发社区和丰富的第三方库和框架，提供了丰富的工具和资源。</li></ol><p><code>TypeScript</code>的优势：</p><ol><li>静态类型检查：TypeScript 可以在编译阶段捕获错误，提供更好的代码质量和可维护性。类型检查可以在开发过程中发现潜在的问题，并提供更好的开发工具支持，例如代码智能提示和重构功能。</li><li>类和模块系统：TypeScript 支持类和模块的概念，使得代码组织和重用更加清晰和易于理解。</li><li>渐进式采用：由于 TypeScript 是 JavaScript 的超集，可以逐步将现有的 JavaScript 代码转换为 TypeScript 代码，无需一次性迁移。这使得团队可以渐进地采用 TypeScript，而不需要从头开始重写代码。</li><li>强大的工具支持：TypeScript 提供了丰富的开发工具支持，如编辑器插件、调试器、测试框架等，提高了开发效率和代码质量。</li></ol><h2 id="何时选择-js-和-ts-的区别" tabindex="-1"><a class="header-anchor" href="#何时选择-js-和-ts-的区别" aria-hidden="true">#</a> 何时选择：JS 和 TS 的区别</h2><h3 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> typeScript</h3><p>类型安全和错误检测 | 使用一些 JavaScript 校验工具 会增加运行时开销，可以通过 typeScript 编译时验证<br> 学习成本 | 熟悉静态类型语言，或者需要在大型项目中进行团队协作，那么选择 TypeScript 可能更为理想<br> 迁移升级 | TypeScript 还提供了工具和指南，以帮助你将 JavaScript 代码迁移到 TypeScript。</p><h3 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript" aria-hidden="true">#</a> JavaScript</h3><p>小项目 | 代码量较少的项目中使用 typeScript 有点校正过头了，选择 JavaScript 可能更合适<br> 生态丰富 | JavaScript 有着广泛的生态系统和丰富的第三方库支持，适用于各种领域和平台</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>javaScript 支持隐式转换，是一种灵活的编程语言，但这是一把双刃剑，常常伴随语法错误、编程不规范等问题<br> typeScript 的出现，弥补 JavaScript 缺陷，拓展许多功能和特性，更适合开发大型项目，提高维护性，减少 bug。</p><p>TypeScript 的优势所在，总结下来有三点：</p><ol><li>规避⼤量低级错误，避免时间浪费，省时</li><li>减少多⼈协作项⽬的成本，⼤型项⽬友好，省⼒</li><li>良好代码提示，不⽤反复⽂件跳转或者翻⽂档，省⼼</li></ol><h1 id="从-0-到-1-上手-typescript" tabindex="-1"><a class="header-anchor" href="#从-0-到-1-上手-typescript" aria-hidden="true">#</a> 从 0 到 1 上手 typescript</h1><h2 id="_01-安装-typescript" tabindex="-1"><a class="header-anchor" href="#_01-安装-typescript" aria-hidden="true">#</a> 01 安装 typeScript</h2><p>推荐使用国内镜像</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm config <span class="token keyword">set</span> registry https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>registry<span class="token punctuation">.</span>npmmirror<span class="token punctuation">.</span>com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令行安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> typescript  // 全局安装
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装完使用 tsc 命令查看版本号</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>tsc <span class="token operator">-</span> v<span class="token punctuation">;</span>
<span class="token comment">// 输出版本号 Version 5.1.6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_02-配置开发工具" tabindex="-1"><a class="header-anchor" href="#_02-配置开发工具" aria-hidden="true">#</a> 02 配置开发工具</h2>`,23),_=a("br",null,null,-1),S={href:"https://code.visualstudio.com/",target:"_blank",rel:"noopener noreferrer"},f=a("br",null,null,-1),j=a("br",null,null,-1),x=a("img",{src:"https://gyg-bawei-zg4-2103b.oss-cn-beijing.aliyuncs.com/b1fe4709f93b098011ae81fb8fb47fc1.png",alt:"",loading:"lazy"},null,-1),J=t(`<h2 id="_03-hi-typescript" tabindex="-1"><a class="header-anchor" href="#_03-hi-typescript" aria-hidden="true">#</a> 03 hi typeScript</h2><p>来，开始创建你的第一个 ts 文件吧<br> 打开编辑器，将下方代码保存到 <code>hi.js</code> 文件中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 用 ： 定义了 persson类型 为string</span>
<span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">person</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> person<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token string">&quot;Tom&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sayHello</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译执行，输入以下命令</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>tsc hi.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行成功，会生成一个同名的 js 文件<br><img src="https://gyg-bawei-zg4-2103b.oss-cn-beijing.aliyuncs.com/ce14bec0f91739d646ad9775c7bdd3d6.png" alt="" loading="lazy"><br> 内容如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token parameter">person</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> person<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token string">&quot;Tom&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sayHello</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 ts 中，已经使用 <code>:</code>定义了 <code>persson</code>类型 ，为什么编译后的 js 代码，未检查<code>person</code>类型呢 ？</p><p>因为 <code>typeScript</code>只会在编译时对检测类型，如有错误，在编译阶段就会报错。其实<code>typeScript</code>在运行阶段和 JavaScript 一样，不会对类型检查。</p>`,9);function T(w,q){const n=i("ExternalLinkIcon");return c(),o("div",null,[l,d,u,h,a("p",null,[v,s("是一种动态类型的编程语言"),a("a",b,[s("为什么说 js 是动态类型语言呢？"),e(n)]),k,s(" 它是一种解释性的脚本语言，常用于前端网页开发和服务器端开发。JavaScript 的特点是灵活，允许在运行时动态修改对象的结构和属性，进行隐式转换修改数据类型，适合用于快速原型设计和开发。")]),a("p",null,[m,a("a",g,[s("typeScript 是 js 的超集"),e(n)]),s(" 是一种静态类型的编程语言，需要在编译阶段进行类型检查，并将 TypeScript 代码转换为 JavaScript 代码。TypeScript 的目标是增强 JavaScript 的可维护性和可扩展性，特别适用于大型项目和团队开发。")]),y,a("p",null,[s("主流开发工具均支持 typeScript 语法，我个人推荐 vs Code，集成丰富插件，语法提示、代码补全等功能。"),_,s(" 下载安装："),a("a",S,[s("Visual Studio Code - Code Editing. Redefined"),e(n)]),f,s(" **中文语言包 **vsCode 默认下载是英文配置，如需中文，需下载 chines 语言包"),j,x]),J])}const H=p(r,[["render",T],["__file","gkpaocb8zzni39bg.html.vue"]]);export{H as default};
