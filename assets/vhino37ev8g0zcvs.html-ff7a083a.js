const n=JSON.parse('{"key":"v-fec68ab8","path":"/docs/vhino37ev8g0zcvs.html","title":"react 函数组件中 props应用","lang":"zh-CN","frontmatter":{"title":"react 函数组件中 props应用","urlname":"vhino37ev8g0zcvs","date":"2023-07-25 20:29:41","updated":"2023-07-25 20:30:12","description":"在 React 函数组件中，可以通过 props 对象来接收传递给组件的属性（props）。以下是一些常见的 props： 自定义属性： 你可以根据需要在组件上定义任意数量的自定义属性，并在父组件中传递给子组件。子组件可以通过 props 对象来访问这些属性。 function MyComponent(props) { return &lt;div&gt;{props.name}&lt;/div&gt;; } // 在父组件中使用 MyComponent，并传递 name 属性 &lt;MyComponent name=\\"John\\" /&gt;;","head":[["meta",{"property":"og:url","content":"http://www.itwangtian.com/docs/vhino37ev8g0zcvs.html"}],["meta",{"property":"og:site_name","content":"王天的web进阶之路"}],["meta",{"property":"og:title","content":"react 函数组件中 props应用"}],["meta",{"property":"og:description","content":"在 React 函数组件中，可以通过 props 对象来接收传递给组件的属性（props）。以下是一些常见的 props： 自定义属性： 你可以根据需要在组件上定义任意数量的自定义属性，并在父组件中传递给子组件。子组件可以通过 props 对象来访问这些属性。 function MyComponent(props) { return &lt;div&gt;{props.name}&lt;/div&gt;; } // 在父组件中使用 MyComponent，并传递 name 属性 &lt;MyComponent name=\\"John\\" /&gt;;"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-30T13:53:52.000Z"}],["meta",{"property":"article:author","content":"程序员王天"}],["meta",{"property":"article:published_time","content":"2023-07-25T20:29:41.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-30T13:53:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"react 函数组件中 props应用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-25T20:29:41.000Z\\",\\"dateModified\\":\\"2023-09-30T13:53:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"程序员王天\\",\\"url\\":\\"http://www.itwangtian.com\\"}]}"]]},"headers":[],"git":{"createdTime":1696082032000,"updatedTime":1696082032000,"contributors":[{"name":"1970652600@qq.com~","email":"1970652600@qq.com","commits":1}]},"readingTime":{"minutes":1.26,"words":379},"filePathRelative":"docs/vhino37ev8g0zcvs.md","localizedDate":"2023年7月25日","excerpt":"<p>在 React 函数组件中，可以通过 <code>props</code> 对象来接收传递给组件的属性（props）。以下是一些常见的 <code>props</code>：</p>\\n<ol>\\n<li>自定义属性：<br>\\n你可以根据需要在组件上定义任意数量的自定义属性，并在父组件中传递给子组件。子组件可以通过 <code>props</code> 对象来访问这些属性。</li>\\n</ol>\\n<div class=\\"language-jsx line-numbers-mode\\" data-ext=\\"jsx\\"><pre class=\\"language-jsx\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">MyComponent</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">props</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">{</span>props<span class=\\"token punctuation\\">.</span>name<span class=\\"token punctuation\\">}</span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 在父组件中使用 MyComponent，并传递 name 属性</span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">MyComponent</span></span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>John<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token punctuation\\">/&gt;</span></span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
