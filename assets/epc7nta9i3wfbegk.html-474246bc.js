const e=JSON.parse('{"key":"v-104aace1","path":"/docs/epc7nta9i3wfbegk.html","title":"declare 和 .d.ts","lang":"zh-CN","frontmatter":{"title":"declare 和 .d.ts","urlname":"epc7nta9i3wfbegk","updated":"2023-09-15 11:25:36","description":"declare 类型补全 declare 在 TypeScript 中的作用是声明全局变量、函数、类或模块的类型信息，而不需要提供具体实现 应用场景主要包括以下几个方面，解决相应的问题： 与外部 JavaScript 代码交互：当使用第三方 JavaScript 库时，使用 declare 可以声明该库的类型信息，让 TypeScript 在编写代码时提供类型检查和智能提示，避免类型错误。 引入缺少的类型声明：当使用没有提供类型声明文件的 JavaScript 库时，通过 declare 手动声明其类型信息，以便享受 TypeScript 的类型检查和编辑器支持。 扩展全局对象的类型：在 TypeScript 中，可以使用 declare 扩展全局对象的类型，添加或覆盖属性和方法，使其与实际情况匹配。","head":[["meta",{"property":"og:url","content":"http://www.itwangtian.com/docs/epc7nta9i3wfbegk.html"}],["meta",{"property":"og:site_name","content":"王天的web进阶之路"}],["meta",{"property":"og:title","content":"declare 和 .d.ts"}],["meta",{"property":"og:description","content":"declare 类型补全 declare 在 TypeScript 中的作用是声明全局变量、函数、类或模块的类型信息，而不需要提供具体实现 应用场景主要包括以下几个方面，解决相应的问题： 与外部 JavaScript 代码交互：当使用第三方 JavaScript 库时，使用 declare 可以声明该库的类型信息，让 TypeScript 在编写代码时提供类型检查和智能提示，避免类型错误。 引入缺少的类型声明：当使用没有提供类型声明文件的 JavaScript 库时，通过 declare 手动声明其类型信息，以便享受 TypeScript 的类型检查和编辑器支持。 扩展全局对象的类型：在 TypeScript 中，可以使用 declare 扩展全局对象的类型，添加或覆盖属性和方法，使其与实际情况匹配。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-30T13:53:52.000Z"}],["meta",{"property":"article:author","content":"程序员王天"}],["meta",{"property":"article:modified_time","content":"2023-09-30T13:53:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"declare 和 .d.ts\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-30T13:53:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"程序员王天\\",\\"url\\":\\"http://www.itwangtian.com\\"}]}"]]},"headers":[{"level":2,"title":"无法获取.d.ts 文件的类型？","slug":"无法获取-d-ts-文件的类型","link":"#无法获取-d-ts-文件的类型","children":[]}],"git":{"createdTime":1696082032000,"updatedTime":1696082032000,"contributors":[{"name":"1970652600@qq.com~","email":"1970652600@qq.com","commits":1}]},"readingTime":{"minutes":2.73,"words":820},"filePathRelative":"docs/epc7nta9i3wfbegk.md","localizedDate":"2023年9月30日","excerpt":"<h1> declare</h1>\\n<blockquote>\\n<p>类型补全</p>\\n</blockquote>\\n<p>declare 在 TypeScript 中的作用是声明全局变量、函数、类或模块的类型信息，而不需要提供具体实现</p>\\n<p>应用场景主要包括以下几个方面，解决相应的问题：</p>\\n<ol>\\n<li><code>与外部 JavaScript 代码交互</code>：当使用第三方 JavaScript 库时，使用 declare 可以声明该库的类型信息，让 TypeScript 在编写代码时提供类型检查和智能提示，避免类型错误。</li>\\n<li><code>引入缺少的类型声明</code>：当使用没有提供类型声明文件的 JavaScript 库时，通过 declare 手动声明其类型信息，以便享受 TypeScript 的类型检查和编辑器支持。</li>\\n<li><code>扩展全局对象的类型</code>：在 TypeScript 中，可以使用 declare 扩展全局对象的类型，添加或覆盖属性和方法，使其与实际情况匹配。</li>\\n</ol>","autoDesc":true}');export{e as data};
