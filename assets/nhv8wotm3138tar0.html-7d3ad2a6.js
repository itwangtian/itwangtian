import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-6af8d918.js";const p={},e=t(`<p>以一种对象结构的方式描述页面。通过比对虚拟 dom 的数据结构差异，来更新实际 dom，避免了传统 dom 中的重绘问题。</p><h1 id="_1-原生-dom-所带来的问题" tabindex="-1"><a class="header-anchor" href="#_1-原生-dom-所带来的问题" aria-hidden="true">#</a> 1. 原生 DOM 所带来的问题</h1><p>使用原生 DOM 进行操作时，每次更新界面都需要重新计算整个 DOM 树的结构和样式，然后进行重新渲染，这样的操作会带来性能上的开销。</p><p>举一个例子，假设我们需要向一个列表中添加 1000 个列表项。如果使用原生 DOM 进行操作，每次添加列表项都需直接对实际 DOM 进行插入操作，这样做会导致页面渲染变慢，用户体验下降。</p><h1 id="_2-虚拟-dom-是什么" tabindex="-1"><a class="header-anchor" href="#_2-虚拟-dom-是什么" aria-hidden="true">#</a> 2. 虚拟 DOM 是什么</h1><p>虚拟 DOM 是一个轻量级的 JavaScript 对象，它是对真实 DOM 的一种抽象表示。React 通过使用虚拟 DOM 来跟踪和记录对真实 DOM 的修改，然后批量高效地更新真实 DOM。</p><h2 id="虚拟-dom-vs-真实-dom" tabindex="-1"><a class="header-anchor" href="#虚拟-dom-vs-真实-dom" aria-hidden="true">#</a> 虚拟 dom vs 真实 dom</h2><h3 id="结构对比" tabindex="-1"><a class="header-anchor" href="#结构对比" aria-hidden="true">#</a> 结构对比</h3><p>原生 js 中的 doucment.createEelment 和 react.reacteElement 创建元素，打印出来看下数据结构</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">VDOM</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;小杜杜&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">DOM</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token constant">DOM</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&quot;真帅呀&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">虚拟DOM：</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token constant">VDOM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">真实DOM：</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token constant">DOM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="流程对比" tabindex="-1"><a class="header-anchor" href="#流程对比" aria-hidden="true">#</a> 流程对比</h3><p>在传统的 Web 应用中，数据的变化会实时地更新到用户界面中，于是每次数据微小的变化都会引起 DOM 的渲染。</p><p>而虚拟 DOM 的目：是将所有的操作聚集到一块，计算出所有的变化后，统一更新一次虚拟 DOM</p><p>举一个例子，假设我们需要向一个列表中添加 1000 个列表项。如果使用原生 DOM 进行操作，渲染 1000 次，而使用虚拟 dom 只需要要渲染一次。</p><h2 id="react-中组件名为什么大写" tabindex="-1"><a class="header-anchor" href="#react-中组件名为什么大写" aria-hidden="true">#</a> react 中组件名为什么大写？</h2><p>用于区分 react 组件和原生标签，在 react 中渲染组件是使用 bebal 来解析 jsx 内容，大写命名组件，是告诉 jsx 将组件渲染真实 dom</p><h1 id="_3-虚拟-dom-大致工作流程" tabindex="-1"><a class="header-anchor" href="#_3-虚拟-dom-大致工作流程" aria-hidden="true">#</a> 3. 虚拟 DOM 大致工作流程</h1><ul><li>React 首次渲染时，会构建整个组件树的虚拟 DOM。</li><li>当状态发生变化时，React 会生成新的虚拟 DOM 树。</li><li>React 会将新旧虚拟 DOM 树进行对比，找出需要更新的部分。</li><li>根据对比结果，React 会生成一系列 DOM 操作指令。</li><li>React 将这些指令应用到真实 DOM 上，实现页面的局部更新。</li></ul><h1 id="_4-虚拟-dom-是如何解决问题的" tabindex="-1"><a class="header-anchor" href="#_4-虚拟-dom-是如何解决问题的" aria-hidden="true">#</a> 4. 虚拟 DOM 是如何解决问题的</h1><p>虚拟 DOM 通过在 JavaScript 中使用轻量级的虚拟对象来代替真实 DOM，实现了对真实 DOM 的抽象。通过比较新旧虚拟 DOM 树的差异，React 能够准确计算出需要更新的部分，并只对这些部分进行 DOM 操作，避免了不必要的 DOM 操作开销，提高了性能。</p><h1 id="_5-虚拟-dom-真的能带来更好的性能吗" tabindex="-1"><a class="header-anchor" href="#_5-虚拟-dom-真的能带来更好的性能吗" aria-hidden="true">#</a> 5. 虚拟 DOM 真的能带来更好的性能吗？</h1><p>是的，虚拟 DOM 能够带来更好的性能。通过对比新旧虚拟 DOM 树，React 可以最小化 DOM 的操作次数，只对需要更新的部分进行操作，从而减少了浏览器重绘的次数，提升了性能效率。</p><h1 id="_6-虚拟-dom-的价值到底是什么" tabindex="-1"><a class="header-anchor" href="#_6-虚拟-dom-的价值到底是什么" aria-hidden="true">#</a> 6. 虚拟 DOM 的价值到底是什么</h1><p>虚拟 DOM 的价值主要体现在两个方面：</p><ul><li>提高性能: 通过最小化 DOM 操作的次数，优化了页面的渲染性能，提升了用户体验。</li><li>更方便的开发: 使用虚拟 DOM 可以将关注点从底层的 DOM 操作转移到组件开发上，使得开发者更关注组件的构建和交互逻辑，从而提高开发效率。</li></ul><h1 id="_7-虚拟-dom-用在哪里" tabindex="-1"><a class="header-anchor" href="#_7-虚拟-dom-用在哪里" aria-hidden="true">#</a> 7. 虚拟 DOM 用在哪里</h1><p>虚拟 DOM 主要被应用于 React 框架中，用于构建用户界面。React 使用虚拟 DOM 作为中间层，负责管理组件的状态变化，并高效地更新页面的显示。</p><h1 id="_8-简单实现虚拟-dom-案例" tabindex="-1"><a class="header-anchor" href="#_8-简单实现虚拟-dom-案例" aria-hidden="true">#</a> 8. 简单实现虚拟 DOM 案例</h1><p>这是一个简单的虚拟 DOM 案例，用于展示虚拟 DOM 的基本原理，仅供参考：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义虚拟DOM元素的构造函数</span>
<span class="token keyword">function</span> <span class="token function">VNode</span><span class="token punctuation">(</span><span class="token parameter">tagName<span class="token punctuation">,</span> props<span class="token punctuation">,</span> children</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>tagName <span class="token operator">=</span> tagName<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>props <span class="token operator">=</span> props<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> children<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 渲染虚拟DOM</span>
<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> element <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果是字符串类型，直接返回文本节点</span>
    <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 创建对应的真实DOM</span>
  <span class="token keyword">const</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 设置props中的属性</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> propName <span class="token keyword">in</span> element<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dom<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>propName<span class="token punctuation">,</span> element<span class="token punctuation">.</span>props<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 递归渲染子节点</span>
  element<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    dom<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">render</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> dom<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建虚拟DOM</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;app&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span><span class="token string">&quot;h1&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;This is a virtual DOM example.&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 渲染虚拟DOM到真实DOM节点</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个简单的虚拟 DOM 案例，通过构造虚拟 DOM 元素，并使用<code>render</code>函数将虚拟 DOM 渲染为真实 DOM，从而实现了页面的展示。当需要更新页面时，只需要更新虚拟 DOM，然后重新调用<code>render</code>函数即可。</p>`,31),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","nhv8wotm3138tar0.html.vue"]]);export{r as default};
