import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-43fba5d8.js";const e={},o=t(`<blockquote><p>❌ 经过不断尝试，果断放弃 webhoooks！不是踩坑太多，而是最终配好后执行太耗时。<br> 💡 自动部署，本质是在服务器执行 git clone ，因受服务器资资源限制、此过程会非常耗时，我 20 多兆的仓库，整个过程需要半个小时。<br> ✔️ 过程太慢还浪费服务器宽度，还不如本地写个脚本上传算了</p></blockquote><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>🔥 对 webhooks 不刚兴趣可直接看最后一章节，通过<code>ssh2-sftp-client</code> 模块实现上传服务器</p></div><h1 id="webhoooks-自动部署-git-项目" tabindex="-1"><a class="header-anchor" href="#webhoooks-自动部署-git-项目" aria-hidden="true">#</a> webhoooks 自动部署 git 项目</h1><p>有什么用？<br> 更直观点讲，有了 webhooks，可以实现自动化部署，无需每次手动上传服务器啦<br> gitee 和 github 中都有此功能 1.自动化 shell 脚本 2.服务端实现 3.配置 github webhooks</p><p>宝塔<br> 配置环境<br> 宝塔默认是安装好 git 的<br> 配置公钥<br> 生成 Git 生产环境下的公钥的命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令将生成一个 RSA 类型的 SSH 密钥对，包括一个私钥和一个公钥。请注意替换 &quot;<a href="mailto:your_email@example.com">your_email@example.com</a>&quot; 为你自己的电子邮件地址。<br><strong>回车三次</strong><br> 生成的密钥对默认存储在用户的 ~/.ssh 目录下，文件名为 id_rsa（私钥）和 id_rsa.pub（公钥）。</p><p>生成公钥后，你可以将公钥内容复制并添加到 Git 托管服务（如 GitHub、GitLab 或 Bitbucket）的账户设置中，以便在进行远程操作时进行身份验证和访问控制。<br> 这里添加到 github 中<br> 首次需配置 git<br> 在宝塔面板的终端设置 git</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git config --global user.name &quot;17638567073@163.com&quot;
git config --global user.email &quot;17638567073@163.com&quot;
git config --global credential.helper store //会生成.gitconfig 的文件
cat .gitconfig   //如果报错: No such file or directory，就用下一行的代码
cat ~/.gitconfig  //显示内容
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="node-实现项目-自动部署" tabindex="-1"><a class="header-anchor" href="#node-实现项目-自动部署" aria-hidden="true">#</a> node 实现项目-自动部署</h1><h2 id="ssh2-sftp-client" tabindex="-1"><a class="header-anchor" href="#ssh2-sftp-client" aria-hidden="true">#</a> ssh2-sftp-client</h2><p>ssh2-sftp-client 模块是一个用于在 Node.js 环境中进行 SSH 文件传输协议（SFTP）操作的库<br> 以使用这个模块来实现远程文件的上传、下载或其他文件操作任务。</p><blockquote><p>SSH 文件上传适用于通过 SSH 协议在<strong>本地计算机和远程服务器</strong>之间建立安全连接进行文件传输</p></blockquote><p><strong>完整上传代码</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ssh2-sftp-client 亲测好用，完全没毛病！</span>
<span class="token keyword">let</span> Client <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;ssh2-sftp-client&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token parameter">localPath<span class="token punctuation">,</span> romotePath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> sftp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sftp
    <span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;xxx&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 服务器 IP</span>
      <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token string">&quot;22&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;xxx&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 服务器登录用户名</span>
      <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;xxx&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 服务器登录密码</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 上传文件</span>
      <span class="token comment">// return sftp.fastPut(localPath, romotePath);</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;上传文件中&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 下载文件</span>
      <span class="token keyword">return</span> sftp<span class="token punctuation">.</span><span class="token function">uploadDir</span><span class="token punctuation">(</span>localPath<span class="token punctuation">,</span> romotePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// console.log(localPath + &quot;上传完成&quot;);</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&quot;上传完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      sftp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">&quot;catch error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> srcPath <span class="token operator">=</span> <span class="token string">&quot;/www/wwwroot/itwangtian.com&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// localPath = path.join(__dirname, &#39;test.txt&#39;),</span>
  romotePath <span class="token operator">=</span> <span class="token string">&quot;./src/.vuepress/dist&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 上传文件</span>
<span class="token comment">// 第一个参数是需要上传的文件的本地路径；第二个参数是服务器存放的地址</span>
<span class="token comment">// put(localPath, romotePath);</span>
<span class="token comment">// 下载文件</span>
<span class="token comment">// 第一个参数是需要下载的文件在服务器存放的地址；第二个参数是本地存放的路径</span>
<span class="token function">put</span><span class="token punctuation">(</span>romotePath<span class="token punctuation">,</span> srcPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="npm-执行多个命令行" tabindex="-1"><a class="header-anchor" href="#npm-执行多个命令行" aria-hidden="true">#</a> npm 执行多个命令行</h2><h2 id="场景" tabindex="-1"><a class="header-anchor" href="#场景" aria-hidden="true">#</a> 场景</h2><p>这两天用 vuepres 搭建知识库博客，每次部署到服务器上，都需要执行多个命令行，分别如下：</p><ol><li><code>npm run buld</code></li><li><code>npm run upbt (运行ssl上传脚本)</code></li></ol><p>在上传代码到服务器前，还需手动打包项目，虽然说多执行一个步骤，但是作为一个程序员来说，最大的兴趣就是将重复的事情自动化。<br> 怎么实现呢？<br> 推荐使用 <code>npm-run-all</code></p><h2 id="npm-run-all" tabindex="-1"><a class="header-anchor" href="#npm-run-all" aria-hidden="true">#</a> npm-run-all</h2><p>npm-run-all 是一个 npm 包，用于在 package.json 的 scripts 中并行或顺序执行多个命令。它提供了灵活的命令组合和执行方式。</p><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h3><p>先安装 npm-run-all</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>npm install <span class="token operator">-</span>g npm-run-all
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>咱们可以按照以下步骤来使用 npm-run-all：</p><ol><li>首先，在你的项目目录下，确保你已经有一个 package.json 文件。如果没有，请先使用以下命令初始化一个新的 package.json 文件：</li></ol><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>npm init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>在 package.json 文件中的 scripts 部分，配置你要执行的命令。你可以使用 npm-run-all 的命令格式，如下：</li></ol><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;scripts&quot;</span>: <span class="token punctuation">{</span>
    <span class="token string">&quot;command1&quot;</span>: <span class="token string">&quot;your-command-1&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;command2&quot;</span>: <span class="token string">&quot;your-command-2&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;build&quot;</span>: <span class="token string">&quot;npm-run-all command1 command2&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，command1 和 command2 分别代表你要执行的两个命令，而 build 则是一个包装命令，用于顺序执行 command1 和 command2。</p><ol start="3"><li>接下来，你可以打开终端并在项目目录下执行以下命令：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这会触发 npm 执行 package.json 中的 build 命令，即 npm-run-all command1 command2。此时，npm-run-all 将按照顺序依次执行 command1 和 command2。</p><h3 id="更多用法" tabindex="-1"><a class="header-anchor" href="#更多用法" aria-hidden="true">#</a> 更多用法</h3><ul><li><code>--parallel</code>：并行运行 npm 脚本。可以将多个脚本命令以空格分隔传递给该参数，npm-run-all 将同时运行它们。示例：npm-run-all --parallel script1 script2 script3</li><li><code>--serial</code>：按顺序运行 npm 脚本。可以将多个脚本命令以空格分隔传递给该参数，npm-run-all 将按照顺序运行它们。示例：npm-run-all --serial script1 script2 script3</li><li><code>--continue-on-error</code>：即使前一个脚本命令执行失败，也继续执行后续的脚本。示例：npm-run-all --parallel --continue-on-error script1 script2</li><li><code>--aggregate-output</code>：将所有脚本的输出合并到一个终端中显示。示例：npm-run-all --serial --aggregate-output script1 script2 script3</li></ul>`,36),p=[o];function l(c,i){return s(),a("div",null,p)}const d=n(e,[["render",l],["__file","webhooks 自动部署git项目.html.vue"]]);export{d as default};
