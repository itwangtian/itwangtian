import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-6b52c1cf.js";const p={},e=t(`<p>JavaScript 被称为动态类型语言，是因为它的类型在运行时决定，并且可以在运行时动态改变变量的类型。以下是一些示例来说明 JavaScript 的动态类型特性：</p><ol><li>变量类型的弱化：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// x被推断为number类型</span>
x <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 现在x的类型变为string</span>
x <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 这里x的类型变为boolean</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 JavaScript 中，变量的类型可以根据赋值的值自动推断，并且可以在运行时改变变量的类型。</p><ol start="2"><li>动态属性：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;John&quot;</span>

person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;Jane&quot;</span>

person<span class="token punctuation">.</span>address <span class="token operator">=</span> <span class="token string">&quot;New York&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;New York&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 JavaScript 中，对象的属性可以在运行时动态地添加或修改。</p><ol start="3"><li>动态函数参数：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;HelloWorld&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;2Hello&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 JavaScript 中，函数的参数类型并没有在定义时指定，可以接受不同类型的参数并执行不同的操作。</p><p>这些示例展示了 JavaScript 的动态类型特性，变量可以根据赋值动态改变类型，对象的属性可以在运行时动态添加或修改，函数的参数可以接受不同类型的值。这种动态性赋予了 JavaScript 更大的灵活性，在某些情况下也增加了一些开发的挑战。</p><h1 id="ts-vs-js-动态-vs-静态" tabindex="-1"><a class="header-anchor" href="#ts-vs-js-动态-vs-静态" aria-hidden="true">#</a> ts VS js （动态 vs 静态）</h1><p><code>动态类型语言</code>直接运行时对变量检测，无需声明变量类型<br><code>静态类型语言</code>需声明变量类型，在编译时对变量类型检测</p><p>JavaScript 被称为动态类型语言，因为它在运行时对变量的类型进行推断和处理。这意味着你可以在运行时改变变量的类型，而不需要提前进行类型声明。以下是一些 JavaScript 的动态类型示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> variable <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 变量可以被赋予一个数字类型的值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 10</span>

variable <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 变量可以被赋予一个字符串类型的值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Hello</span>

variable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 变量可以被赋予一个布尔类型的值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相比之下，TypeScript 是静态类型语言，它在编译时就会对变量的类型进行检查，并在代码中明确声明变量的类型。这使得在开发阶段可以发现潜在的类型错误。以下是一些 TypeScript 的静态类型示例：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> variable<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 变量被声明为数字类型</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 10</span>

variable <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 错误：不能将字符串类型赋给数字类型的变量</span>

<span class="token keyword">let</span> greeting<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Hello</span>

greeting <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 错误：不能将布尔类型赋给字符串类型的变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这些示例中，你可以看到 TypeScript 代码中的变量需要在声明时指定类型，并且在编译过程中会对类型错误进行检查。如果违反了类型规定，TypeScript 编译器会发出错误提示。</p><p>这种类型检查能够在开发阶段捕获潜在的错误，帮助提高代码的健壮性和可靠性，减少运行时错误。</p><h1 id="typescript-强是型语言还是弱类型语言" tabindex="-1"><a class="header-anchor" href="#typescript-强是型语言还是弱类型语言" aria-hidden="true">#</a> typeScript 强是型语言还是弱类型语言？</h1><p>类型系统按照「是否允许隐式类型转换」来分类，可以分为强类型和弱类型。</p><p>TypeScript 是完全兼容 JavaScript 的，它不会修改 JavaScript 运行时的特性，所以<strong>它们都是弱类型</strong>。</p><p>如下在 typescript 中运行：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>console.log(1 + &#39;1&#39;);
// 打印出字符串 &#39;11&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>python 是强类型语言，如下分别执行 1+1 、1+&quot;1&quot;，1+1 相同类型计算正常运行，当运行 number 类型 1 + string 1 时，报错。</p><p><img src="https://gyg-bawei-zg4-2103b.oss-cn-beijing.aliyuncs.com/a51d4bbf95d44deba4763cb44d482606.png" alt="image.png" loading="lazy"><br> 强制类型转换后 可正常输入<br><img src="https://gyg-bawei-zg4-2103b.oss-cn-beijing.aliyuncs.com/72b44e1451bfa3aafe2c8547a683322c.png" alt="image.png" loading="lazy"><br> typescript 可以借助自身类型系统， 配合 eslint 的代码检查能力，跟进一步向强类型语言靠近。</p>`,26),o=[e];function c(l,i){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","nfknzexbccraar99.html.vue"]]);export{d as default};
