import{_ as t,r as p,o as e,c as o,a as n,b as s,d as c,e as i}from"./app-e0b242bf.js";const l={},u=n("h1",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),r=n("br",null,null,-1),k={href:"https://itwangtian.com",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),v=n("br",null,null,-1),m=n("img",{src:"https://gyg-bawei-zg4-2103b.oss-cn-beijing.aliyuncs.com/51fdf06c7ce3a1f91976e2528b2bd954.jpeg",alt:"",loading:"lazy"},null,-1),b=i(`<h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><p>我使用的<code>elog</code>插件批量导出语雀文档。<code>elog</code>采用的配置是所有文章平铺导出，没有按照语雀知识库目录生成<code>markdown</code>，这导致 vuepress 侧边栏无法和语雀一致，如下图。</p><p><img src="https://gyg-bawei-zg4-2103b.oss-cn-beijing.aliyuncs.com/6dbd6d8b65e17693770347edb53eb0db.png" alt="image.png" loading="lazy"><br> 上图，左侧是语雀知识库，右侧是导出到 vuepress 展示的效果，很明显没有目录这很影响阅读体验呀</p><h2 id="解决" tabindex="-1"><a class="header-anchor" href="#解决" aria-hidden="true">#</a> 解决</h2><p>在查阅 vuepress 文档后，发现配置<code>silderbar.ts</code>可以自定义侧边栏目录，配置参数如下：</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  theme<span class="token operator">:</span> <span class="token function">defaultTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 可折叠的侧边栏</span>
    sidebar<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;/web/&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          text<span class="token operator">:</span> <span class="token string">&quot;王天的web进阶手册&quot;</span><span class="token punctuation">,</span>
          collapsible<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 目录是否折叠</span>
          children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;/reference/cli.md&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/reference/config.md&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 文档目录</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          text<span class="token operator">:</span> <span class="token string">&quot;王天的魔法工具箱&quot;</span><span class="token punctuation">,</span>
          collapsible<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          children<span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token string">&quot;/reference/bundler/vite.md&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;/reference/bundler/webpack.md&quot;</span><span class="token punctuation">,</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="递归生成菜单" tabindex="-1"><a class="header-anchor" href="#递归生成菜单" aria-hidden="true">#</a> 递归生成菜单</h2><p>配置<code>sidebar.ts</code> 可以修改左侧菜单，但是一个个手动修改这忒麻烦了啊啊啊啊。那如何批量生产菜单配置项呢？</p><p><strong>递归函数呀呀呀呀呀呀 🔥🔥🔥🔥</strong></p><blockquote><p>elog 在同步语雀文档时，会自动创建<code>elog.cache.json</code>缓存文件，在 vueprss 项目根目录中查看。</p></blockquote><p>打开<code>elog.cache.json</code>文件，我们能看到语雀文档知识库的数据结构</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;catalog&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;DOC&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;前言&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;uuid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;17Os-_V_hcS37KOD&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;wqbpyf5083qc7ho8&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;prev_uuid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;sibling_uuid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dmQSRn6AXUBSg96x&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;child_uuid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;parent_uuid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;doc_id&quot;</span><span class="token operator">:</span> <span class="token number">141216125</span><span class="token punctuation">,</span>
      <span class="token property">&quot;level&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">141216125</span><span class="token punctuation">,</span>
      <span class="token property">&quot;open_window&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token property">&quot;visible&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>catlog 属性是文档缓存数据，关键字段：</p><ul><li>type：值为&#39;DOC&#39; 是文章、值为 TITLE 则为目录</li><li>uuid：文章 id</li><li>prent_uuid:父节点的 uuid</li></ul><p>咱们根据以上参数，编写递归函数， 将<code>elog.cache.json</code>的一维数组，递归生成 vuepress 侧边栏配置数据<br> 代码如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">genYuqueRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 参数1:遍历数组</span>
  <span class="token comment">// 参数2:父菜单id</span>
  <span class="token keyword">const</span> <span class="token function-variable function">deep</span> <span class="token operator">=</span> <span class="token punctuation">(</span>arrlist<span class="token punctuation">,</span> parantId<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> forList<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    arrlist<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 菜单id不一致，跳出循环调用</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>parent_uuid <span class="token operator">!==</span> parantId<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token comment">// 如果是TITLE类型新增配置项</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&quot;TITLE&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        forList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          text<span class="token operator">:</span> element<span class="token punctuation">.</span>title<span class="token punctuation">,</span>
          collapsible<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          children<span class="token operator">:</span> <span class="token function">deep</span><span class="token punctuation">(</span>arrlist<span class="token punctuation">,</span> element<span class="token punctuation">.</span>uuid<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果是DOC 类型追加文件地址</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        forList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>url <span class="token operator">+</span> <span class="token string">&quot;.md&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> forList<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">deep</span><span class="token punctuation">(</span>catalog<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="效果" tabindex="-1"><a class="header-anchor" href="#效果" aria-hidden="true">#</a> 效果</h2><figure><img src="http://gyg-bawei-zg4-2103b.oss-cn-beijing.aliyuncs.com/6ff4b658dea0287b1188645b480ea87e.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="敲重点啦" tabindex="-1"><a class="header-anchor" href="#敲重点啦" aria-hidden="true">#</a> 敲重点啦！</h2><p>递归函数本质上是一个在回调自身的函数，用于改造数据结构，重点在于跳出循环的机制，否则陷入死循环啦</p><h1 id="dfs-vs-bfs" tabindex="-1"><a class="header-anchor" href="#dfs-vs-bfs" aria-hidden="true">#</a> DFS vs BFS ？</h1><p>什么是 DFS 、BFS ?</p><ul><li>DFS 深度优先搜索：可以用于找到一条路径、判断图中是否存在循环、拓扑排序、生成连通分量等。</li><li>BFS 广度优先搜索：可以用于找到最短路径、生成最小生成树、进行网络分析等。</li></ul><div class="hint-container danger"><p class="hint-container-title">警告</p><p>🧚🏻‍♀️ 简单理解为，横向 、竖向 遍历据状结构</p><ul><li>深度优先搜索，对数据结构的横向执行，从第一行遍历子节点、叶子节点，依次直到最后一行。</li><li>广度优先搜索，对数据结构的竖向执行，把树结构平面铺开、以层级数为列数，从第一列依次执行。</li></ul></div><p>将深度搜索、广度搜索代入到生活场景更容易理解。</p><p>咱们先看一个家庭关系树状图，爷爷奶奶是一级属性、父母叔伯二级、孙子孙女三级属性、重孙们是四级属性，以此类推。形成一个家庭关系树状图。<br> 假如奶奶过八十大寿，按辈分来，首先是父母叔伯这一辈祝寿，其次是孙子孙女辈分，最后重孙们，以此类推，这个竖向执行的祝寿过程就是广度优先搜索<br> 那过年走亲戚的话，咱们没有俺辈分，去分批的吧？至少我们老家不是的，都是一去一家子呢。那这个横线执行的过程，就是深度优先搜索。</p><h4 id="深度优先搜索-dfs-示例代码" tabindex="-1"><a class="header-anchor" href="#深度优先搜索-dfs-示例代码" aria-hidden="true">#</a> 深度优先搜索（DFS）示例代码：</h4><p>从 A 节点依次取出数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 图的邻接表表示</span>
<span class="token keyword">const</span> graph <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token constant">A</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token constant">B</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;D&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;E&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token constant">C</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;G&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token constant">D</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token constant">E</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token constant">F</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token constant">G</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 使用深度优先搜索遍历图</span>
<span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">graph<span class="token punctuation">,</span> start</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 存储已访问节点的集合</span>

  <span class="token keyword">function</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将当前节点标记为已访问</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印遍历的节点</span>

    <span class="token keyword">const</span> neighbors <span class="token operator">=</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 获取当前节点的邻居节点</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> neighbor <span class="token keyword">of</span> neighbors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 遍历当前节点的邻居节点</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果邻居节点未被访问过</span>
        <span class="token function">traverse</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归遍历邻居节点</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">traverse</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从起始节点开始进行深度优先搜索</span>
  <span class="token keyword">return</span> visited<span class="token punctuation">;</span> <span class="token comment">// 返回所有已访问的节点</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">dfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对图进行深度优先搜索，从起始节点 &#39;A&#39; 开始，并打印遍历结果</span>
<span class="token comment">// A</span>
<span class="token comment">// B</span>
<span class="token comment">// D</span>
<span class="token comment">// E</span>
<span class="token comment">// C</span>
<span class="token comment">// F</span>
<span class="token comment">// G</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，图使用邻接表表示，<code>dfs</code> 函数使用递归方式实现了深度优先搜索。从起始节点 <code>&#39;A&#39;</code> 开始，递归访问其邻居节点，并在访问时输出节点的值。</p><h4 id="广度优先搜索-bfs-示例代码" tabindex="-1"><a class="header-anchor" href="#广度优先搜索-bfs-示例代码" aria-hidden="true">#</a> 广度优先搜索（BFS）示例代码：</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 广度搜索 BFS</span>
<span class="token keyword">let</span> graph <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token constant">A</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token constant">B</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token constant">C</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;E&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token constant">D</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;E&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token constant">E</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;F&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token constant">F</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;W&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token constant">W</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token parameter">graph<span class="token punctuation">,</span> startPoint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 用于存储待访问节点的队列</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 存储遍历结果的数组</span>

  queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>startPoint<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将起始节点添加到队列</span>
  result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>startPoint<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将起始节点添加到遍历结果</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当队列不为空时进行循环</span>
    <span class="token keyword">let</span> point <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取出队列中的第一个节点作为当前节点</span>
    <span class="token keyword">let</span> nodes <span class="token operator">=</span> graph<span class="token punctuation">[</span>point<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 获取当前节点的所有邻居节点</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> node <span class="token keyword">of</span> nodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 遍历当前节点的邻居节点</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 如果邻居节点已经在遍历结果中，则跳过</span>
      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将邻居节点添加到遍历结果中</span>
      queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将邻居节点添加到队列中，以便后续访问其邻居节点</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> result<span class="token punctuation">;</span> <span class="token comment">// 返回遍历结果</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行广度优先搜索，从起始节点 &#39;B&#39; 开始，并输出遍历结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，图使用邻接表表示，<code>bfs</code> 函数使用队列实现了广度优先搜索。从起始节点 <code>&#39;A&#39;</code> 开始，将其加入队列并标记为已访问，然后依次从队列中取出节点，并访问其邻居节点，同时将邻居节点加入队列中，直到队列为空。</p><h2 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h2><p>深度优先搜索（DFS）和广度优先搜索（BFS）在前端项目中有许多实际的应用场景。下面有两个常见的前端开发项目案例</p><h2 id="_1、组件树遍历" tabindex="-1"><a class="header-anchor" href="#_1、组件树遍历" aria-hidden="true">#</a> 1、组件树遍历</h2><p>在前端开发中，经常会有需要对组件树进行遍历的场景，例如渲染组件、查找组件等。下面是一个使用 DFS 进行组件树遍历的示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">dfs_component_traversal</span><span class="token punctuation">(</span><span class="token parameter">component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理当前组件</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>component<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> child <span class="token keyword">of</span> component<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">dfs_component_traversal</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归遍历子组件</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上的代码展示了一个使用深度优先搜索进行组件树遍历的函数。我们可以根据组件的层级关系，从根组件开始递归地遍历每个组件及其子组件，以实现对整个组件树的遍历和操作。</p><p>这个算法可以帮助我们在前端项目中处理组件之间的关系，例如渲染组件、查找相关组件等。通过对组件树的深度遍历，我们可以有序地处理组件及其子组件，并执行相应的操作。</p><h2 id="_2、页面导航" tabindex="-1"><a class="header-anchor" href="#_2、页面导航" aria-hidden="true">#</a> 2、页面导航</h2><p>在前端开发中，页面导航是一个常见的需求。我们可以使用广度优先搜索来实现页面导航功能，以确保按照层级关系有序地展示页面。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bfs_page_navigation</span><span class="token punctuation">(</span><span class="token parameter">page</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>page<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 使用队列作为辅助数据结构来进行广度优先搜索</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> current <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 移除队列头部元素作为当前页面</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理当前页面</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> child <span class="token keyword">of</span> current<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将子页面加入队列</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码展示了一个使用广度优先搜索进行页面导航的函数。在这个函数中，我们使用队列作为辅助数据结构来进行广度优先搜索。通过不断将子页面加入队列，并按照队列中的顺序处理每个页面，可以实现按照层级关系有序地导航页面。</p><h2 id="_3、dfs-bfs-综合案例" tabindex="-1"><a class="header-anchor" href="#_3、dfs-bfs-综合案例" aria-hidden="true">#</a> 3、DFS + BFS 综合案例</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>
          <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
              <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>
              <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
          <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 在深度优先搜索 - 堆</span>
<span class="token comment">// 我们首先处理当前节点，然后递归地处理每个子节点、直到叶子节点（没有子节点的节点），最后依次遍历完成</span>
<span class="token keyword">const</span> <span class="token function-variable function">digui</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> children <span class="token keyword">of</span> node<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">digui</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 广度优先搜索-栈，把多维树结构，取出来平铺，依次访问。</span>
<span class="token comment">// 在广度优先搜索中，我们使用队列来保存待访问的节点，确保按照层级顺序进行遍历。</span>
<span class="token comment">// 每次从队列中取出队头节点，处理该节点后，将其邻居节点（子节点）入队，以便后续遍历。这样，就可以依次访问所有节点，并保持层级顺序。</span>

<span class="token keyword">function</span> <span class="token function">breadthFirstSearch</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个空队列，用于存放待访问的节点</span>
  queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将根节点入队</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当队列不为空时循环执行以下步骤</span>
    <span class="token keyword">const</span> current <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 出队队头节点作为当前节点</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 进行二次加工或其他操作，这里简单地输出节点的值</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> child <span class="token keyword">of</span> current<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 遍历当前节点的邻居节点（子节点）</span>
      queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将未访问过的邻居节点入队</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">digui</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">breadthFirstSearch</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><p>深度优先搜索（DFS）的原理很简单：我们从起始节点开始，沿着一条路径不断向下探索，直到达到终点或者无法继续为止。如果遇到终点，就找到了一条路径；如果无法继续，则回溯到上一个节点，然后尝试探索其他路径。这个过程会递归地进行，或者使用栈来存储节点的顺序。</p><p>相比之下，广度优先搜索（BFS）的原理稍微有些不同：我们从起始节点开始，逐层地访问其邻居节点。也就是说，我们首先访问起始节点的邻居节点，然后是邻居节点的邻居节点，依此类推，直到遍历完所有节点或者找到目标节点为止。为了遍历节点的顺序，我们使用队列数据结构。</p>`,51);function h(g,f){const a=p("ExternalLinkIcon");return e(),o("div",null,[u,n("p",null,[s("这两天在尝试用语雀＋ vuepress ＋ github 搭建个人博客。"),r,s(" 小破站地址 ："),n("a",k,[s("王天的 web 进阶之路"),c(a)]),d,s(" 语雀作为编辑器，发布文档推送 github，再自动打包部署，大概流程如下。"),v,m]),b])}const y=t(l,[["render",h],["__file","od0ahbmsfgdw3kpm.html.vue"]]);export{y as default};
