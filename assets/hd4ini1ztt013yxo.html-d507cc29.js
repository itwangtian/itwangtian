const e=JSON.parse('{"key":"v-e047a62a","path":"/docs/hd4ini1ztt013yxo.html","title":"type 别名","lang":"zh-CN","frontmatter":{"title":"type 别名","urlname":"hd4ini1ztt013yxo","date":"2023-08-14 21:00:41","updated":"2023-09-13 10:21:24","description":"在 TypeScript 中，type 关键字用于创建类型别名（Type Aliases）。类型别名允许你为一个具体的类型或类型组合定义一个名称，以便在代码中重复使用。 type 的作用有以下几个方面： 类型复用： 通过类型别名，你可以将一个复杂的类型定义为一个名称，然后在需要使用该类型的地方直接使用该名称。这有助于提高代码的可读性和可维护性。 type User = { name: string; age: number; }; type Callback = (data: User) =&gt; void; function fetchData(callback: Callback) { // ... }","head":[["meta",{"property":"og:url","content":"http://www.itwangtian.com/docs/hd4ini1ztt013yxo.html"}],["meta",{"property":"og:site_name","content":"王天的web进阶之路"}],["meta",{"property":"og:title","content":"type 别名"}],["meta",{"property":"og:description","content":"在 TypeScript 中，type 关键字用于创建类型别名（Type Aliases）。类型别名允许你为一个具体的类型或类型组合定义一个名称，以便在代码中重复使用。 type 的作用有以下几个方面： 类型复用： 通过类型别名，你可以将一个复杂的类型定义为一个名称，然后在需要使用该类型的地方直接使用该名称。这有助于提高代码的可读性和可维护性。 type User = { name: string; age: number; }; type Callback = (data: User) =&gt; void; function fetchData(callback: Callback) { // ... }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-30T13:53:52.000Z"}],["meta",{"property":"article:author","content":"程序员王天"}],["meta",{"property":"article:published_time","content":"2023-08-14T21:00:41.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-30T13:53:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"type 别名\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-14T21:00:41.000Z\\",\\"dateModified\\":\\"2023-09-30T13:53:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"程序员王天\\",\\"url\\":\\"http://www.itwangtian.com\\"}]}"]]},"headers":[{"level":2,"title":"type vs interface","slug":"type-vs-interface","link":"#type-vs-interface","children":[]},{"level":2,"title":"表示类型","slug":"表示类型","link":"#表示类型","children":[]},{"level":2,"title":"继承状态","slug":"继承状态","link":"#继承状态","children":[]}],"git":{"createdTime":1696082032000,"updatedTime":1696082032000,"contributors":[{"name":"1970652600@qq.com~","email":"1970652600@qq.com","commits":1}]},"readingTime":{"minutes":2.55,"words":764},"filePathRelative":"docs/hd4ini1ztt013yxo.md","localizedDate":"2023年8月14日","excerpt":"<p>在 TypeScript 中，<code>type</code> 关键字用于创建类型别名（Type Aliases）。类型别名允许你为一个具体的类型或类型组合定义一个名称，以便在代码中重复使用。</p>\\n<p><code>type</code> 的作用有以下几个方面：</p>\\n<ol>\\n<li><strong>类型复用：</strong> 通过类型别名，你可以将一个复杂的类型定义为一个名称，然后在需要使用该类型的地方直接使用该名称。这有助于提高代码的可读性和可维护性。</li>\\n</ol>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">type</span> <span class=\\"token class-name\\">User</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n  name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">;</span>\\n  age<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">type</span> <span class=\\"token class-name\\">Callback</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>data<span class=\\"token operator\\">:</span> User<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">fetchData</span><span class=\\"token punctuation\\">(</span>callback<span class=\\"token operator\\">:</span> Callback<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// ...</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
