import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-6af8d918.js";const e={},p=t(`<p>如果你在 TypeScript 函数中使用了可选参数，但是 ESLint 报错了，你可以通过以下方法进行解决：</p><ol><li>在函数定义的地方添加一个注释 <code>// eslint-disable-next-line @typescript-eslint/no-unused-vars</code> 来忽略该行的错误提示。这会告诉 ESLint 忽略当前行的未使用变量的警告。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span>param1<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> param2<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// eslint-disable-next-line @typescript-eslint/no-unused-vars</span>
  <span class="token comment">// 使用了可选参数 \`param2\`，但是未在代码中使用</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>param1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在 ESLint 配置文件中禁用 <code>@typescript-eslint/no-unused-vars</code> 规则。在你的项目根目录下的 <code>.eslintrc.js</code> 或 <code>.eslintrc.json</code> 文件中，找到相关的规则配置并将其禁用。</li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;rules&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;@typescript-eslint/no-unused-vars&quot;</span><span class="token operator">:</span> <span class="token string">&quot;off&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>如果你需要在代码中使用可选参数，但是 ESLint 的规则认为它是未使用的，你可以确保在代码中使用该参数，以避免报错。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span>param1<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> param2<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>param2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>param2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用了可选参数 \`param2\`</span>
  <span class="token punctuation">}</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>param1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过采取上述方法，你可以解决 ESLint 报错的问题，并根据你的实际需求来处理 TypeScript 函数中的可选参数。</p>`,8),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","rua0g9bcb7vgi0oq.html.vue"]]);export{d as default};
