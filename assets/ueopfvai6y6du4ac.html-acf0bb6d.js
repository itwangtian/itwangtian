import{_ as o,r as p,o as c,c as i,a as n,b as s,d as t,e}from"./app-00d07f3a.js";const l={},u=e('<p>当我们访问一个需要身份验证的网站或应用时，通常需要提供用户名和密码来验证身份。然而，这种方式存在一些问题，比如密码可能会被泄露或被猜测出来。为了解决这些问题，引入了一种称为&quot;token 鉴权&quot;的身份验证机制。</p><p>Token 鉴权是一种基于令牌的身份验证方式。用户登录成功后，服务器生成唯一令牌返回给客户端。客户端在后续请求中携带令牌作为身份凭证。</p><p>服务器验证令牌，确定用户身份和权限。令牌不存储在服务器，减轻负担。令牌可设置有效期，增加安全性。令牌可包含额外信息，方便权限控制。</p><p>优势在于简单、安全、可扩展。不依赖用户名密码，减少密码泄露风险。可实现单点登录和跨系统身份验证。可通过加密和签名增加安全性。</p><h2 id="token-和-jsonwebtoken-流程图" tabindex="-1"><a class="header-anchor" href="#token-和-jsonwebtoken-流程图" aria-hidden="true">#</a> token 和 jsonwebtoken 流程图</h2><p>token -接口访问凭证<img src="https://gyg-bawei-zg4-2103b.oss-cn-beijing.aliyuncs.com/3afca19611725d4df57137367b2cb5fc.webp" alt="" loading="lazy"><br> 💡jwt（鉴权常用方案）<br><img src="https://gyg-bawei-zg4-2103b.oss-cn-beijing.aliyuncs.com/d297c2030dd23a666a263301aaa6343b.jpeg" alt="IMG_4169.JPG" loading="lazy"></p><h2 id="无感刷新-token-处理方案" tabindex="-1"><a class="header-anchor" href="#无感刷新-token-处理方案" aria-hidden="true">#</a> 无感刷新 token 处理方案</h2><h3 id="定义两个-token" tabindex="-1"><a class="header-anchor" href="#定义两个-token" aria-hidden="true">#</a> 定义两个 token</h3><p>单点登录</p><blockquote><p>主站维护自己的 refresh-token，有效期较长，每次 token 过期后可以用 refresh-token 给自己续命请求新的 token，从主站跳转到子站，或者主站授权去其他页面，都是给其他页面 token，token 的有效期较短，过期了就得重新授权，所以通过 token 和 refresh-token 就可以做到相对安全的单点登陆或者授权，因为他们两个的失效完全不同。</p></blockquote><ul><li>token_refresh( 刷新业务 token 的访问凭证)</li><li>access（业务 token）</li></ul><p>为了安全期间，每个 access token 有效时间通常不能设太长，而 refresh token 就是为了延长 access token 的有效时间的，一开始就 refresh token，那明显不符合<br><img src="https://gyg-bawei-zg4-2103b.oss-cn-beijing.aliyuncs.com/4764bd028d00d2a05c11a91ffe508756.webp" alt="" loading="lazy"></p><h3 id="定义一个-token" tabindex="-1"><a class="header-anchor" href="#定义一个-token" aria-hidden="true">#</a> 定义一个 token</h3>',13),r=n("br",null,null,-1),k=n("br",null,null,-1),d={href:"https://juejin.cn/post/6854573219119104014",target:"_blank",rel:"noopener noreferrer"},m=n("br",null,null,-1),h={href:"https://juejin.cn/post/6983582201690456071#heading-5",target:"_blank",rel:"noopener noreferrer"},b=n("h3",{id:"问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#问题","aria-hidden":"true"},"#"),s(" 问题")],-1),v={href:"https://juejin.cn/post/6983582201690456071#heading-4",target:"_blank",rel:"noopener noreferrer"},f={href:"https://juejin.cn/post/6983582201690456071#heading-5",target:"_blank",rel:"noopener noreferrer"},g=e(`<h2 id="cookie-ssetion-vs-token" tabindex="-1"><a class="header-anchor" href="#cookie-ssetion-vs-token" aria-hidden="true">#</a> cookie-ssetion vs token</h2><ul><li>sestionId 需要存储在数据库中，增加了查询的开销</li><li>token 是个无状态的，无需存储，缺陷 token 有效期内销毁</li></ul><h2 id="接口-超时未操作登出" tabindex="-1"><a class="header-anchor" href="#接口-超时未操作登出" aria-hidden="true">#</a> 接口-超时未操作登出</h2><p>在 token 鉴权的功能基础上，实现接口超时未交互，则账号退出。<br><strong>防踩坑无用版</strong>以下思路是我在<strong>未接触无感刷新方案的意淫版，图一乐就行啦</strong><br><strong>前端实现（有风险-容易被篡改）</strong><br> 在前端请求拦截中实现</p><ol><li>首次请求成功后本地存储时间，下次请求响应前进行时间校验。</li><li>当前时间与本地时间校验，未超时继续请求，超时则跳转登录页。</li></ol><p><strong>后端 node 实现</strong><br> 用户操作任意一个接口时，后台进行校验。</p><ol><li>在用户登录成功时，将用户的最后操作时间记录在会话中或存储在数据库中。</li><li>对于每个请求，都更新用户的最后操作时间。</li><li>设置一个定时器或定时任务，在一定时间间隔内检查用户最后操作时间与当前时间的差值。如果超过了设定的时间阈值，则执行退出操作。</li></ol><h3 id="第二版-通用方案-💡" tabindex="-1"><a class="header-anchor" href="#第二版-通用方案-💡" aria-hidden="true">#</a> 第二版（通用方案 💡）</h3><p>使用双 token 实现无感刷新登录 🔄，无需再检测接口超时未访问、实现系统登出功能。</p><p>因为在请求拦截器中，监听接口 401 状态（token 失效）去调用刷新 token 接口，如果 refash_toke 也失效，说明在规定时间内未访问、则登出系统</p><h2 id="前端-超时未操作登出" tabindex="-1"><a class="header-anchor" href="#前端-超时未操作登出" aria-hidden="true">#</a> 前端-超时未操作登出</h2><p>用户长时间未操作页面，返回登录<br> 每隔 30s 去检查一下用户是否过了 30 分钟未操作页面。<br> 注意事项：！需要考虑及时销毁定时器</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 引入路由和storage工具函数</span>
<span class="token keyword">import</span> storage <span class="token keyword">from</span> <span class="token string">&quot;@/utils/storage&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">&quot;@/common/router&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> lastTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> currentTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> timeOut <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">//设置超时时间: 30分钟</span>

window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  window<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function-variable function">onmousedown</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stroage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&quot;lastTime&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">checkTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  currentTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//更新当前时间</span>
  lastTime <span class="token operator">=</span> stroage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&quot;lastTime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>currentTime <span class="token operator">-</span> lastTime <span class="token operator">&gt;</span> timeOut<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//判断是否超时</span>

    <span class="token comment">// 清除storage的数据(登陆信息和token)</span>
    storage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 跳到登陆页</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>router<span class="token punctuation">.</span>currentRouter<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">&quot;login&quot;</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 当前已经是登陆页时不做跳转</span>
    router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;login&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 定时器 间隔30秒检测是否长时间未操作页面 */</span>
  window<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span>checkTimeout<span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function _(w,y){const a=p("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("在请求响应拦截器中拦截，判断 token 返回过期后，调用刷新 token 接口"),r,s(" 参考链接"),k,n("a",d,[s("https://juejin.cn/post/6854573219119104014"),t(a)]),m,n("a",h,[s("https://juejin.cn/post/6983582201690456071#heading-5"),t(a)])]),b,n("ul",null,[n("li",null,[n("a",v,[s("问题一：如何防止多次刷新 token"),t(a)])]),n("li",null,[n("a",f,[s("问题二：同时发起两个或者两个以上的请"),t(a)])])]),g])}const x=o(l,[["render",_],["__file","ueopfvai6y6du4ac.html.vue"]]);export{x as default};
