import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,d as t,e as p}from"./app-510708ee.js";const l={},u=n("h1",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),r=n("p",null,[s("这两天在学习阿里云 oss 上传。踩了不少坑，"),n("img",{src:"https://gyg-bawei-zg4-2103b.oss-cn-beijing.aliyuncs.com/a612e66218d3d2c4d2fd19368317e17a.png",alt:"092318F5.png",loading:"lazy"}),s(" 终于实现了大文件分片、断点续传的功能。这篇文章主要分享学习笔记，希望能给大家一些帮助。")],-1),k=n("p",null,[s("先看效果 ↓"),n("br"),n("img",{src:"https://gyg-bawei-zg4-2103b.oss-cn-beijing.aliyuncs.com/4f1d196bd7937f1a276ced97e4c2cc9c.gif",alt:"oss断点 -original-original.gif",loading:"lazy"}),n("br"),n("strong",null,"技术栈")],-1),d=n("li",null,"前端： react+Ts + axios 上传文件",-1),v=n("li",null,"Node 部分：定义接口、阿里云 oss",-1),m={href:"http://socket.io",target:"_blank",rel:"noopener noreferrer"},b={href:"http://socket.io",target:"_blank",rel:"noopener noreferrer"},g=n("h1",{id:"环境安装",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#环境安装","aria-hidden":"true"},"#"),s(" 环境安装")],-1),h=n("img",{src:"https://gyg-bawei-zg4-2103b.oss-cn-beijing.aliyuncs.com/63f63f96d60f8234794a9f2035634df1.gif",alt:"08E1CE2D.gif",loading:"lazy"},null,-1),f={href:"https://ram.console.aliyun.com/manage/ak?spm=a2c8b.12215393.top-nav.dak.6c12336aYGPYmv",target:"_blank",rel:"noopener noreferrer"},y=n("br",null,null,-1),q=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 下载 Koa 模块</span>
npm install koa
<span class="token comment">// 下载 Koa Router 模块 https://www.npmjs.com/package/koa-Router[包含示例代码]</span>
npm install koa<span class="token operator">-</span>router
<span class="token comment">// 下载 @koa/cors 模块</span>
npm install @koa<span class="token operator">/</span>cors
<span class="token comment">// 下载 ali-oss 模块</span>
npm install ali<span class="token operator">-</span>oss
<span class="token comment">// 下载 koa-body 模块</span>
npm install koa<span class="token operator">-</span>body
<span class="token comment">// 下载 socket.io</span>
npm install socket<span class="token punctuation">.</span>io
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="前端部分" tabindex="-1"><a class="header-anchor" href="#前端部分" aria-hidden="true">#</a> 前端部分</h1><p>前端使用 react+Ts，但无论哪种框架，其实业务逻辑是一样的</p><h3 id="初始化-socket" tabindex="-1"><a class="header-anchor" href="#初始化-socket" aria-hidden="true">#</a> 初始化 socket</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> userId <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  userId <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> host <span class="token operator">=</span> <span class="token string">&quot;http://127.0.0.1:3000&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> soket <span class="token operator">=</span> <span class="token function">io</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>
soket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;connect&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;链接了 Connected to server&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 模拟用户登录</span>
soket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;login&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  userId<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

soket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="文件上传" tabindex="-1"><a class="header-anchor" href="#文件上传" aria-hidden="true">#</a> 文件上传</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">upload</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// FileList 内置接口</span>
  <span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token punctuation">(</span>inputRef<span class="token punctuation">.</span>current<span class="token operator">?.</span>files <span class="token keyword">as</span> FileList<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;inputRef&#39;</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;没有选择文件&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;file&#39;</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> userId <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;userId&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> string
  formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;userId&#39;</span><span class="token punctuation">,</span>userId<span class="token punctuation">)</span>
  <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>host<span class="token operator">+</span><span class="token string">&#39;/upload&#39;</span><span class="token punctuation">,</span> formData<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token comment">// onUploadProgress 监听的是客户端发送数据的进度，而不是存储服务器的进度。</span>
    <span class="token function-variable function">onUploadProgress</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">progressEvent</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> percentage <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span>progressEvent<span class="token punctuation">.</span>loaded <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> progressEvent<span class="token punctuation">.</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Upload progress: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>percentage<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">%</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> progressEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="进度回显" tabindex="-1"><a class="header-anchor" href="#进度回显" aria-hidden="true">#</a> 进度回显</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>progress<span class="token punctuation">,</span> setProgress<span class="token punctuation">]</span> <span class="token operator">=</span> useState <span class="token operator">&lt;</span> number <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
soket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;uploadding&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;uploadding&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setProgress</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="node-部分" tabindex="-1"><a class="header-anchor" href="#node-部分" aria-hidden="true">#</a> node 部分</h1>`,10),w={href:"http://socket.io",target:"_blank",rel:"noopener noreferrer"},_={id:"socket-io",tabindex:"-1"},x=n("a",{class:"header-anchor",href:"#socket-io","aria-hidden":"true"},"#",-1),j={href:"http://socket.io",target:"_blank",rel:"noopener noreferrer"},I=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> createServer <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 导出创建服务的模块函数</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> Server <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;socket.io&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建socket.io 服务的函数</span>
<span class="token keyword">const</span> httpServer <span class="token operator">=</span> <span class="token function">createServer</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个http服务实例，app.callback() 作为服务器的请求处理函数</span>
<span class="token keyword">const</span> io <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span>httpServer<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">cors</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">origin</span><span class="token operator">:</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 配置socket允许跨越</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="上传接口" tabindex="-1"><a class="header-anchor" href="#上传接口" aria-hidden="true">#</a> 上传接口</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 上传接口</span>
router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/upload&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> file <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>files<span class="token punctuation">.</span>file<span class="token punctuation">;</span>
  <span class="token comment">// 用户id</span>
  <span class="token keyword">let</span> userId <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">.</span>userId<span class="token punctuation">;</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 判断文件大小，超过partSize进行分片上传</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span>size <span class="token operator">&lt;</span> partSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;直连操作&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">commonUpload</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;分片上传&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">multipartUpload</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> result<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;上传失败&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">401</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="暂停接口" tabindex="-1"><a class="header-anchor" href="#暂停接口" aria-hidden="true">#</a> 暂停接口</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/break&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> userId <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">.</span>userId<span class="token punctuation">;</span>
  <span class="token comment">// 取出 当前用户的阿里云实例，用于仅关闭当前上传</span>
  <span class="token keyword">let</span> itemClient <span class="token operator">=</span> userList<span class="token punctuation">[</span>userId<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;client&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>itemClient<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    itemClient<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;暂停成功&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">401</span><span class="token punctuation">,</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;暂停失败&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="继续上传接口" tabindex="-1"><a class="header-anchor" href="#继续上传接口" aria-hidden="true">#</a> 继续上传接口</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 继续上传</span>
router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/continue&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> userId <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">.</span>userId<span class="token punctuation">;</span>
  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;已继续上传&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token function">resumeMultiparUpload</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;继续上传报错&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分片上传" tabindex="-1"><a class="header-anchor" href="#分片上传" aria-hidden="true">#</a> 分片上传</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 分片上传</span>
<span class="token keyword">const</span> <span class="token function-variable function">multipartUpload</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> userId</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> userList<span class="token punctuation">[</span>userId<span class="token punctuation">]</span><span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">multipartUpload</span><span class="token punctuation">(</span>
      file<span class="token punctuation">.</span>originalFilename<span class="token punctuation">,</span>
      file<span class="token punctuation">.</span>filepath<span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        parallel<span class="token punctuation">,</span>
        partSize<span class="token punctuation">,</span>
        <span class="token function-variable function">progress</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> checkpoint</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">onProgress</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> checkpoint<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;multipartUpload&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="断点续传" tabindex="-1"><a class="header-anchor" href="#断点续传" aria-hidden="true">#</a> 断点续传</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 断点续传</span>
<span class="token keyword">const</span> <span class="token function-variable function">resumeMultiparUpload</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">userId</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取当前用户分片缓存</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> checkpoint <span class="token operator">=</span> checkpoints<span class="token punctuation">[</span>userId<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> uploadId<span class="token punctuation">,</span> file <span class="token punctuation">}</span> <span class="token operator">=</span> checkpoint<span class="token punctuation">;</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> userList<span class="token punctuation">[</span>userId<span class="token punctuation">]</span><span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">multipartUpload</span><span class="token punctuation">(</span>uploadId<span class="token punctuation">,</span> file<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      parallel<span class="token punctuation">,</span> <span class="token comment">// 分片数量</span>
      partSize<span class="token punctuation">,</span> <span class="token comment">//分片大小</span>
      <span class="token function-variable function">progress</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> checkpoint</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">onProgress</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> checkpoint<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 上传进度回调函数</span>
      checkpoint<span class="token punctuation">,</span> <span class="token comment">// 断点续传缓存目录</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//上传后，删除切片数据</span>
    <span class="token keyword">delete</span> checkpoints<span class="token punctuation">[</span>userId<span class="token punctuation">]</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;result&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;error 获取当前用户分片缓存&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="进度回显-1" tabindex="-1"><a class="header-anchor" href="#进度回显-1" aria-hidden="true">#</a> 进度回显</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 上传进度</span>
<span class="token keyword">const</span> <span class="token function-variable function">onProgress</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> checkpoint<span class="token punctuation">,</span> userId</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// p 进度，checkpoint 当前分片上传数据</span>
  <span class="token keyword">let</span> step <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>p <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转换为百分比</span>
  io<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>userList<span class="token punctuation">[</span>userId<span class="token punctuation">]</span><span class="token punctuation">.</span>socketId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;uploadding&quot;</span><span class="token punctuation">,</span> step<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发给当前客户端</span>
  <span class="token comment">// io.emit(&#39;uploadding&#39;,step) 群发</span>
  <span class="token comment">// 存储分片数据，用户续传</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;上传进度&quot;</span><span class="token punctuation">,</span> step<span class="token punctuation">)</span><span class="token punctuation">;</span>
  checkpoints<span class="token punctuation">[</span>userId<span class="token punctuation">]</span> <span class="token operator">=</span> checkpoint<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),S={id:"socket-io-私聊",tabindex:"-1"},z=n("a",{class:"header-anchor",href:"#socket-io-私聊","aria-hidden":"true"},"#",-1),L={href:"http://socket.io",target:"_blank",rel:"noopener noreferrer"},U=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> userList <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// 用户数据</span>
<span class="token keyword">const</span> partSize <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 每个分片大小(byte) 100kb</span>
<span class="token keyword">const</span> parallel <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 同时上传的分片数</span>
<span class="token keyword">let</span> checkpoints <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 记录上传分片数据，用于断点续传</span>
<span class="token comment">// oss客户端实例</span>

<span class="token comment">// socket.io系统事件，监听链接状态</span>
io<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;connection&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 监听客户端信息数据，存储用户信息</span>

    socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;login&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 用户未链接oss，进行创建oss实例</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>userList<span class="token punctuation">[</span>data<span class="token punctuation">.</span>userId<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token keyword">let</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSS</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                <span class="token comment">// yourRegion填写Bucket所在地域。以华东1（杭州）为例，Region填写为oss-cn-hangzhou。</span>
                <span class="token literal-property property">region</span><span class="token operator">:</span> <span class="token string">&#39;oss-cn-beijing&#39;</span><span class="token punctuation">,</span>
                <span class="token comment">// 阿里云账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM用户进行API访问或日常运维，请登录RAM控W制台创建RAM用户。</span>
                <span class="token literal-property property">accessKeyId</span><span class="token operator">:</span> <span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">accessKeySecret</span><span class="token operator">:</span> <span class="token string">&#39;xx&#39;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">bucket</span><span class="token operator">:</span> &#39;xxx
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 将socket.id 与用户信息关联存储，方便私聊发送</span>
            userList<span class="token punctuation">[</span>data<span class="token punctuation">.</span>userId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
                <span class="token operator">...</span>data<span class="token punctuation">,</span>
                <span class="token literal-property property">socketId</span><span class="token operator">:</span> socket<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
                <span class="token literal-property property">client</span><span class="token operator">:</span> client
            <span class="token punctuation">}</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;socket.id&#39;</span><span class="token punctuation">,</span> socket<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;获取到用户数据&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 已链接oss，进行只更新socket.id</span>
            userList<span class="token punctuation">[</span>data<span class="token punctuation">.</span>userId<span class="token punctuation">]</span><span class="token punctuation">.</span>socketId <span class="token operator">=</span> socket<span class="token punctuation">.</span>id
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;服务端链接成功了&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// socket.io 系统事件-客户端断开监听</span>
    socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;disconnect&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;客户端断开了&#39;</span><span class="token punctuation">)</span>
        <span class="token comment">// io.emit(&#39;quit&#39;, socket.id)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="纯前端操作部分" tabindex="-1"><a class="header-anchor" href="#纯前端操作部分" aria-hidden="true">#</a> 纯前端操作部分</h1><p>如无服务端业务要求，建议客户端调用阿里云 sdk，实现上传 oss 功能，操作如 node 一致，阿里云 sdk 同样支持分片上传等，最方便的是无需再创建 socket 获取进度。<br> 兄弟们，点赞收藏过 20，下篇文章更新呀</p><h1 id="socket-相关-api" tabindex="-1"><a class="header-anchor" href="#socket-相关-api" aria-hidden="true">#</a> Socket 相关 api</h1>`,4),E={href:"http://Socket.IO",target:"_blank",rel:"noopener noreferrer"},P=p(`<h4 id="服务端系统事件" tabindex="-1"><a class="header-anchor" href="#服务端系统事件" aria-hidden="true">#</a> 服务端系统事件：</h4><ol><li><code>connection</code>：当客户端与服务器建立连接时触发。可以在此事件中执行与连接相关的操作。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>io<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;connection&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理连接事件</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>disconnect</code>：当客户端与服务器断开连接时触发。可以在此事件中执行与断开连接相关的操作。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;disconnect&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理断开连接事件</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><code>error</code>：当在连接过程中发生错误时触发。可以在此事件中处理连接错误。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理连接错误事件</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),R={start:"4"},C=n("code",null,"to",-1),D={href:"http://Socket.IO",target:"_blank",rel:"noopener noreferrer"},M=n("code",null,"to",-1),N=p(`<p><code>to</code> 方法的使用方法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>io<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;connection&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 建议 将socket.id 与用户信息关联存储，方便私聊发送</span>
  <span class="token comment">// 向指定客户端发送消息</span>
  io<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello from server!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>io.to(socket.id).emit(&#39;message&#39;, &#39;Hello from server!&#39;)</code> 向特定客户端发送消息，其中 <code>socket.id</code> 表示当前客户端的唯一标识符。</p><h4 id="客户端系统事件" tabindex="-1"><a class="header-anchor" href="#客户端系统事件" aria-hidden="true">#</a> 客户端系统事件：</h4><ol><li><code>connect</code>：当客户端成功连接到服务器时触发。该事件仅发生在客户端连接成功时。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;connect&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理连接成功事件</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>disconnect</code>：当客户端与服务器断开连接时触发。可以在此事件中执行与断开连接相关的操作。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;disconnect&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理断开连接事件</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><code>error</code>：当在连接过程中发生错误时触发。可以在此事件中处理连接错误。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理连接错误事件</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意<img src="https://gyg-bawei-zg4-2103b.oss-cn-beijing.aliyuncs.com/63f63f96d60f8234794a9f2035634df1.gif" alt="08E1CE2D.gif" loading="lazy"></h1><p><strong>socket 开启跨越</strong></p>`,12),A={class:"hint-container warning"},B=n("p",{class:"hint-container-title"},"注意",-1),F={href:"http://socket.io",target:"_blank",rel:"noopener noreferrer"},K={href:"https://socket.io/zh-CN/docs/v4/handling-cors/",target:"_blank",rel:"noopener noreferrer"},O=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> io <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span>httpServer<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">cors</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">origin</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:8080&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 前端访问地址 、&quot;*&quot; 允许所有跨越</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

httpServer<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>koa+socket 使用事项</strong></p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>接口后台和 socket 端口一致情况下，需使用包含 socket 的服务实例来创建监听，否则 socket 无法链接</p></div>`,3),T={href:"http://socket.io",target:"_blank",rel:"noopener noreferrer"},V={href:"http://socket.io",target:"_blank",rel:"noopener noreferrer"},H=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;koa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;koa-Router&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> createServer <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> koaBody <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;koa-body&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> Server <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;socket.io&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 允许接口跨域</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建socket服务</span>
<span class="token keyword">const</span> httpServer <span class="token operator">=</span> <span class="token function">createServer</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> io <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span>httpServer<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">cors</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">origin</span><span class="token operator">:</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 允许socket跨域</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
io<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;connection&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;服务链接了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* … */</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用包含socket的服务示例，如果使用koa中的app实例，则无法监听socket服务</span>
httpServer<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;koa server listening on port 9000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="待做功能" tabindex="-1"><a class="header-anchor" href="#待做功能" aria-hidden="true">#</a> 待做功能</h1><p>sts 临时授权<br> oss 上传应设置会话时长，超时进行重新获取，业务步骤类似 token 鉴权，阿里云 oss 操作也应该进行鉴权</p>`,3),Y=n("br",null,null,-1),G={href:"https://www.cnblogs.com/qiaomucreate/p/16653265.html",target:"_blank",rel:"noopener noreferrer"};function W($,J){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,r,k,n("ol",null,[d,v,n("li",null,[n("a",m,[s("socket.io"),t(a)]),s(" ：实时同步上传进度 "),n("blockquote",null,[n("p",null,[s("特别说明 axios 中 onUploadProgress 只是上传本地文件的进度，不是上传服务器存入的进度，需要 "),n("a",b,[s("socket.io"),t(a)]),s(" 从服务端实时返回上传进度")])])])]),g,n("p",null,[h,s("需进行阿里云 oss 配置，获取 appid、密钥等参数 ↓"),n("a",f,[s("阿里云登录 - 欢迎登录阿里云，安全稳定的云计算服务平台"),t(a)]),y,s(" 以下是创建 node 服务所需依赖包")]),q,n("p",null,[s("后台使用 koa 创建 node 服务，主要分为 api 接口、阿里云业务函数、"),n("a",w,[s("socket.io"),t(a)]),s(" 实时发送上传进度")]),n("h3",_,[x,s(),n("a",j,[s("socket.io"),t(a)])]),I,n("h3",S,[z,s(),n("a",L,[s("socket.io"),t(a)]),s(" 私聊")]),U,n("p",null,[s("在 "),n("a",E,[s("Socket.IO"),t(a)]),s(" 中，客户端和服务端都有一些系统事件。")]),P,n("ol",R,[n("li",null,[C,s(" 在 "),n("a",D,[s("Socket.IO"),t(a)]),s(" 中，"),M,s(" 方法用于向特定房间或客户端发送消息。它允许你将消息发送给指定的接收者。")])]),N,n("div",A,[B,n("p",null,[n("a",F,[s("socket.io"),t(a)]),s(" 需配置跨越，否则无法链接，参考 "),n("a",K,[s("https://socket.io/zh-CN/docs/v4/handling-cors/"),t(a)])])]),O,n("p",null,[s("在 koa 中使用 "),n("a",T,[s("socket.io"),t(a)]),s(" 需要创建一个包含 "),n("a",V,[s("socket.io"),t(a)]),s(" 的服务实例，代码示例如下：")]),H,n("p",null,[s("koa+socket"),Y,n("a",G,[s("https://www.cnblogs.com/qiaomucreate/p/16653265.html"),t(a)])])])}const Z=e(l,[["render",W],["__file","qai06nw793lx62hm.html.vue"]]);export{Z as default};
