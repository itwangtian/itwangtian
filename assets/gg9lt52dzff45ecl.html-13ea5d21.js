import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as n,b as s,d as e,e as i}from"./app-4ec51699.js";const l={},u=i(`<h1 id="redux-三大原则" tabindex="-1"><a class="header-anchor" href="#redux-三大原则" aria-hidden="true">#</a> redux 三大原则</h1><ul><li>单一数据流</li><li>reducer 纯函数</li><li>state 是只读的</li></ul><h1 id="环境安装" tabindex="-1"><a class="header-anchor" href="#环境安装" aria-hidden="true">#</a> 环境安装</h1><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>npm i redux react<span class="token operator">-</span>redux   @types<span class="token operator">/</span>redux<span class="token operator">-</span>thunk  @types<span class="token operator">/</span>redux<span class="token operator">-</span>logger
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>依次安装 redux、集成 react 的 redux、因 redux 中的禁止使用异步和打印，需要安装插件支持</p></blockquote><h1 id="redux-项目目录" tabindex="-1"><a class="header-anchor" href="#redux-项目目录" aria-hidden="true">#</a> redux 项目目录</h1><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token operator">-</span> src
  <span class="token operator">-</span> actions               <span class="token comment">// 存放定义 action 的文件</span>
    <span class="token operator">-</span> actionTypes<span class="token punctuation">.</span>js      <span class="token comment">// 存放 action 类型常量的文件</span>
    <span class="token operator">-</span> userActions<span class="token punctuation">.</span>js      <span class="token comment">// 存放用户相关的 action 创建函数的文件</span>
    <span class="token operator">-</span> cartActions<span class="token punctuation">.</span>js      <span class="token comment">// 存放购物车相关的 action 创建函数的文件</span>
    <span class="token operator">-</span> <span class="token operator">...</span>
  <span class="token operator">-</span> reducers              <span class="token comment">// 存放定义 reducer 的文件</span>
    <span class="token operator">-</span> index<span class="token punctuation">.</span>js            <span class="token comment">// 根 reducer，使用 combineReducers 合并多个 reducer</span>
    <span class="token operator">-</span> userReducer<span class="token punctuation">.</span>js      <span class="token comment">// 用户相关的 reducer</span>
    <span class="token operator">-</span> cartReducer<span class="token punctuation">.</span>js      <span class="token comment">// 购物车相关的 reducer</span>
    <span class="token operator">-</span> <span class="token operator">...</span>
  <span class="token operator">-</span> store                 <span class="token comment">// 存放 Redux store 相关的文件</span>
    <span class="token operator">-</span> index<span class="token punctuation">.</span>js            <span class="token comment">// 创建 Redux store 的文件</span>
  <span class="token operator">-</span> components            <span class="token comment">// 存放 React 组件的文件夹</span>
    <span class="token operator">-</span> UserComponent<span class="token punctuation">.</span>js    <span class="token comment">// 用户相关的组件</span>
    <span class="token operator">-</span> CartComponent<span class="token punctuation">.</span>js    <span class="token comment">// 购物车相关的组件</span>
    <span class="token operator">-</span> <span class="token operator">...</span>
  <span class="token operator">-</span> containers            <span class="token comment">// 存放包装组件（连接 Redux）的容器组件</span>
    <span class="token operator">-</span> UserContainer<span class="token punctuation">.</span>js    <span class="token comment">// 用户相关的容器组件</span>
    <span class="token operator">-</span> CartContainer<span class="token punctuation">.</span>js    <span class="token comment">// 购物车相关的容器组件</span>
    <span class="token operator">-</span> <span class="token operator">...</span>
  <span class="token operator">-</span> App<span class="token punctuation">.</span>js                <span class="token comment">// 主应用组件</span>
  <span class="token operator">-</span> index<span class="token punctuation">.</span>js              <span class="token comment">// 应用入口文件</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="reducer-函数" tabindex="-1"><a class="header-anchor" href="#reducer-函数" aria-hidden="true">#</a> reducer 函数</h1><p>在 Redux 中，reducer 函数是用来处理状态（state）的函数。它接收两个参数：当前的状态（state）和被分发的 action，然后根据 action 的类型来更新状态并返回新的状态对象。</p><h2 id="reducer-编写规则" tabindex="-1"><a class="header-anchor" href="#reducer-编写规则" aria-hidden="true">#</a> reducer 编写规则</h2><ol><li>只根据 state 和 action 参数计算新的状态值</li><li>不允许修改现有的 state 值，必须通过复制现有的值</li><li>不能做任何异步的操作逻辑、以及副作用【可以通过插件接触此问题】<br> TIP**“ 副作用 ”**** 副作用是在从函数返回值之外可以看到的状态或行为的任何变化**。一些常见的副作用是:</li></ol><ul><li>将值记录到控制台</li><li>保存文件</li><li>设置异步计时器</li><li>发出 AJAX HTTP 请求</li><li>修改存在于函数之外的某些状态，或改变函数的参数</li><li>生成随机数或唯一随机 ID（例如 Math.random() 或 Date.now()）</li></ul><p><strong>reducer 永远不允许改变原始/当前状态值！</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// ❌ 非法 - 默认情况下，这会改变状态！
state.value = 123
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">let</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">userName</span><span class="token operator">:</span> <span class="token string">&quot;赵四&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> initialState<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&quot;SOME_ACTION_TYPE&quot;</span><span class="token operator">:</span>
      <span class="token comment">// 在这里处理 action，并返回新的状态对象</span>
      <span class="token keyword">return</span> newState<span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">&quot;ANOTHER_ACTION_TYPE&quot;</span><span class="token operator">:</span>
      <span class="token comment">// 处理另一个 action</span>
      <span class="token keyword">return</span> newState<span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token comment">// 默认情况下，返回当前状态，不做任何改变</span>
      <span class="token keyword">return</span> state<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>一个 Redux 应用中可以有多个 reducer 函数。每个 reducer 函数负责管理和更新应用中的一部分状态。</li><li>Redux 通过 <code>combineReducers</code> 函数来合并多个 reducer 函数，创建一个根 reducer，然后将根 reducer 传递给 <code>createStore</code> 方法。</li><li>根 reducer 会根据 action 的类型将对应的子状态分发给不同的 reducer 进行处理。</li></ol><h1 id="设计-actions" tabindex="-1"><a class="header-anchor" href="#设计-actions" aria-hidden="true">#</a> 设计 actions</h1><p><strong>Actions</strong> 是具有 type 字段的普通 JavaScript 对象，来描述操作行为。</p><p>例如，在一个电商系统中，当用户点击购买按钮时，我们可以创建一个名为 &quot;PURCHASE&quot; 的 action 来描述这个操作。<br> 一个 action 对象通常包含一个 type 字段来描述 action 的类型，以及可选的 payload 字段来携带额外的数据，type 字段是一个字符串，用于识别 action 的类型，而 payload 字段则可以是任何类型的数据，包括对象、数组、字符串等，用于携带一些与该操作相关的数据。</p><p>下面是一个示例的 action 对象：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;PURCHASE&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">payload</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;Learn Redux&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">completed</span><span class="token operator">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可借助 <code>dispatch</code>派发 redux 中的操作，来修改 store 数据。如下，定义一个派发 dispath 的函数，通常是返回 actions 对象</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">get_table</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">dispatch</span><span class="token operator">:</span> Dispatch</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> instance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/api/table&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;触发-get_Table接口了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;get_table&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">payload</span><span class="token operator">:</span> data<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意！包含 actions 对象的函数，不可是异步函数。但可以借助 thunk 中间件的能力，在 action 函数内部执行异步操作。<br> 如下，需 根 reducer 函数中 开启中间件<code>applyMiddleware</code>，使用 异步插件 thunk</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>
  combineReducers<span class="token punctuation">,</span>
  applyMiddleware<span class="token punctuation">,</span>
  legacy_createStore <span class="token keyword">as</span> createStore<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;redux&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> logger <span class="token keyword">from</span> <span class="token string">&quot;redux-logger&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 打印日志插件</span>
<span class="token keyword">import</span> thunk <span class="token keyword">from</span> <span class="token string">&quot;redux-thunk&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 执行异步操作插件</span>
<span class="token keyword">import</span> table <span class="token keyword">from</span> <span class="token string">&quot;./module/table/index&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 子仓库</span>
<span class="token keyword">import</span> user <span class="token keyword">from</span> <span class="token string">&quot;./module/user/index&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 子仓库</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span>
  <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span> table<span class="token punctuation">,</span> user <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 合并仓库</span>
  <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">,</span> logger<span class="token punctuation">)</span> <span class="token comment">// applyMiddleware 使用中间件</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="使用-redux-仓库" tabindex="-1"><a class="header-anchor" href="#使用-redux-仓库" aria-hidden="true">#</a> 使用 redux 仓库</h1><p><code>Provider</code>组件的作用就是将 Redux 的 store 注入到 React 应用中，并使应用的所有组件都能够访问 Redux 的状态。<br> 使用 Provider 组件的方式如下：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&quot;react-dom&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-redux&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&quot;./store&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 导入 Redux 的 store</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Provider</span></span> <span class="token attr-name">store</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Provider</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 provider 优势是简化了 redux 的集成，不需要在组件内部手动引入状态。</p><p>在 React 组件内部获取 Redux 的 store 有几种常见的方式：</p><ol><li>使用<code>react-redux</code>库中的<code>useSelector</code> Hook：</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useSelector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取counter状态</span>

  <span class="token comment">// 在组件中使用 counter 值</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token comment">// JSX</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>使用<code>react-redux</code>库中的<code>connect</code>函数：</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> counter <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在组件中使用 counter 值</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token comment">// JSX</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  counter<span class="token operator">:</span> state<span class="token punctuation">.</span>counter<span class="token punctuation">,</span> <span class="token comment">// 将 counter 状态映射为组件的 props</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>在函数组件外部使用<code>useStore</code> Hook：</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> counter <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>counter<span class="token punctuation">;</span> <span class="token comment">// 获取 counter 状态</span>

  <span class="token comment">// 在组件中使用 counter 值</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token comment">// JSX</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一种和第二种方式是使用<code>react-redux</code>提供的库函数来连接组件和 store，提供了更方便的 API。<br> 第三种方式是直接使用 Redux 提供的 Hook<code>useStore</code>，更为底层，可以在函数组件外部使用，适用于一些特殊情况。</p><h1 id="拆分-reducers-store" tabindex="-1"><a class="header-anchor" href="#拆分-reducers-store" aria-hidden="true">#</a> 拆分 reducers -store</h1><p>如何将一个复杂的业务仓库，按功能模块拆分为多个小仓库方便管理维护 ?</p><p>例如，一个应用可能有多个状态需要管理，比如用户信息、购物车、主题等等。可以为每个状态编写一个单独的 reducer 函数，并使用 <code>combineReducers</code> 将它们合并成一个根 reducer。</p><blockquote><p>使用 <code>combineReducers</code> 将子仓库合并到跟 reducer 中</p></blockquote><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> combineReducers<span class="token punctuation">,</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;redux&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> userReducer <span class="token keyword">from</span> <span class="token string">&quot;./userReducer&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 用户信息的 reducer</span>
<span class="token keyword">import</span> cartReducer <span class="token keyword">from</span> <span class="token string">&quot;./cartReducer&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 购物车的 reducer</span>
<span class="token keyword">import</span> themeReducer <span class="token keyword">from</span> <span class="token string">&quot;./themeReducer&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 主题的 reducer</span>

<span class="token keyword">const</span> rootReducer <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">user</span><span class="token operator">:</span> userReducer<span class="token punctuation">,</span>
  <span class="token literal-property property">cart</span><span class="token operator">:</span> cartReducer<span class="token punctuation">,</span>
  <span class="token literal-property property">theme</span><span class="token operator">:</span> themeReducer<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>rootReducer<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，<code>combineReducers</code> 函数将 <code>userReducer</code>、<code>cartReducer</code> 和 <code>themeReducer</code> 合并成一个根 reducer。每个 reducer 函数都负责管理对应的状态片段，并根据相应的 action 类型来更新状态。通过这种方式，一个 Redux 应用可以同时管理多个相关联的状态。</p><h1 id="react-redux" tabindex="-1"><a class="header-anchor" href="#react-redux" aria-hidden="true">#</a> react-redux</h1><p>React Redux 是 Redux 官方提供的一个库，专门用于在 React 应用中集成和操作 Redux 的状态</p><h2 id="组件划分" tabindex="-1"><a class="header-anchor" href="#组件划分" aria-hidden="true">#</a> 组件划分</h2><p>react-redux 把组件划分两类，如下：</p><h3 id="一、ui-组件" tabindex="-1"><a class="header-anchor" href="#一、ui-组件" aria-hidden="true">#</a> 一、ui 组件</h3><p>UI 组件有以下几个特征。</p><ul><li>只负责 UI 的呈现，不带有任何业务逻辑</li><li>没有状态（即不使用 this.state 这个变量）</li><li>所有数据都由参数（this.props）提供</li><li>不使用任何 Redux 的 API</li></ul><p>下面就是一个 UI 组件的例子。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">Title</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为不含有状态，UI 组件又称为&quot;纯组件&quot;，即它纯函数一样，纯粹由参数决定它的值。</p><h3 id="二、容器组件" tabindex="-1"><a class="header-anchor" href="#二、容器组件" aria-hidden="true">#</a> 二、容器组件</h3><p>容器组件的特征恰恰相反。</p><ul><li>负责管理数据和业务逻辑，不负责 UI 的呈现</li><li>带有内部状态</li><li>使用 Redux 的 API</li></ul><p>总之，只要记住一句话就可以了：UI 组件负责 UI 的呈现，容器组件负责管理数据和逻辑</p><blockquote><p>React-Redux 规定，所有的 UI 组件都由用户提供，容器组件则是由 React-Redux 自动生成。也就是说，用户负责视觉层，状态管理则是全部交给它 - 阮一峰</p></blockquote><h2 id="connect-函数" tabindex="-1"><a class="header-anchor" href="#connect-函数" aria-hidden="true">#</a> <code>connect</code> 函数</h2><p><code>connect</code>是 react-redux 提供的方法，作用将 UI 组件转为 容器组件。<code>connect</code>接收两个参数 ，分别是<code>mapStateProps</code>和 <code>mapDispatch</code></p><ol><li>参数 1 <code>mapStateProps</code> 负责输入逻辑将 <code>state</code>仓库内容、映射到 UI 组件的参数 <code>props</code></li><li>参数 2<code>mapDispatch</code> 负责输出逻辑，将用户的操作映射成 <code>action</code></li></ol><h4 id="参数-mapstateprops" tabindex="-1"><a class="header-anchor" href="#参数-mapstateprops" aria-hidden="true">#</a> 参数 <code>mapStateProps</code></h4><p>1、<code>mapStateProps</code> 是一个函数。建立外部映射关系，将外部<code>store</code>和组件中的<code>props</code>进行关联。<br><code>mapStateProps</code> 函数返回一个对象，数据结构中的键值对，就是一个映射关系，如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    todos<span class="token operator">:</span> state<span class="token punctuation">.</span>user<span class="token punctuation">,</span> <span class="token comment">// 仓库中的用户数据</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中 <code>mapStateProps</code>函数接收 state 为参数，返回对象中的 todos 属性 、代表 UI 组件的同名参数。在组件内部，我们通过映射关系的 <code>props</code>，可以获取到 state 中的数据。</p><p><code>mapStateProps</code> 会订阅 Store ，每当 store 更新时，会重新计算 UI 组件参数，重新渲染组件。</p><blockquote><p>如不想更新 UI 组件，可以省略 connect 方法中的<code>mapStateProps</code>参数</p></blockquote><h4 id="参数-mapdispatch" tabindex="-1"><a class="header-anchor" href="#参数-mapdispatch" aria-hidden="true">#</a> 参数 <code>mapDispatch</code></h4><p><code>mapDispatch</code> 是<code>connect</code>的第二个参数，用于建立 UI 组件参数和<code>store.dispatch</code>方法的映射。<code>mapDispatch</code> 可以是一个对象，也可以是一个函数。</p><p><code>mapDispatch</code> 作为函数，内置两个参数 ，分别是<code>dispatch</code>和 <code>onwProps</code>（容器组件中的 props）</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">mapDispatchToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dispatch<span class="token punctuation">,</span> ownProps<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">onClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        type<span class="token operator">:</span> <span class="token string">&quot;SET_VISIBILITY_FILTER&quot;</span><span class="token punctuation">,</span>
        filter<span class="token operator">:</span> ownProps<span class="token punctuation">.</span>filter<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中 <code>apDispatch</code> 作为函数 ，返回一个对象，对象中的键值对定义了如何发出 Action。<br> 在组件内部，直接访问 onclick 方法，即可触发 reducer 内操作（更新、修改数据等）</p><p><code>mapDispatch</code> 作为对象，它的每个键名对应的 UI 组件的同名参数，值应该是一个函数。如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token literal-property property">mapDispatch</span><span class="token operator">:</span> any <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 属性get-table ,为组件的同名参数</span>
  <span class="token function-variable function">get_table</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">flter</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;get_table&quot;</span><span class="token punctuation">,</span> <span class="token comment">// type 字段为actions 类型</span>
    <span class="token literal-property property">flter</span><span class="token operator">:</span> flter<span class="token punctuation">,</span> <span class="token comment">// filter 为提交参数</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="mapdispatch-高阶用法" tabindex="-1"><a class="header-anchor" href="#mapdispatch-高阶用法" aria-hidden="true">#</a> <code>mapDispatch</code> 高阶用法</h4><p><code>bindActionCreators</code> 是 Redux 提供的一个辅助函数，来简化 <code>dispatch</code>派发动作过程，避免手动编写派发动作的代码。</p><p>下面是使用 <code>bindActionCreators</code> 的示例和代码讲解：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> bindActionCreators <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;redux&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> addTodo<span class="token punctuation">,</span> completeTodo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./actions&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 创建动作创建函数的对象</span>
<span class="token keyword">const</span> actionCreators <span class="token operator">=</span> <span class="token punctuation">{</span>
  addTodo<span class="token punctuation">,</span>
  completeTodo<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 获取 Redux store</span>
<span class="token comment">// 假设你已经创建了 store 并引入了所需的动作创建函数</span>

<span class="token comment">// 将动作创建函数与派发函数绑定</span>
<span class="token keyword">const</span> dispatch <span class="token operator">=</span> store<span class="token punctuation">.</span>dispatch<span class="token punctuation">;</span>
<span class="token keyword">const</span> boundActionCreators <span class="token operator">=</span> <span class="token function">bindActionCreators</span><span class="token punctuation">(</span>actionCreators<span class="token punctuation">,</span> dispatch<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 在组件中使用绑定后的动作创建函数</span>
<span class="token comment">// 这些函数会自动派发对应的动作到 Redux store</span>

<span class="token comment">// 示例 1：组件中调用绑定后的动作创建函数</span>
boundActionCreators<span class="token punctuation">.</span><span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token string">&quot;Buy groceries&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 示例 2：将绑定后的动作创建函数传递给组件的 props</span>
<span class="token comment">// 在组件内部可以直接调用这些函数来派发动作</span>
<span class="token operator">&lt;</span>MyComponent
  addTodo<span class="token operator">=</span><span class="token punctuation">{</span>boundActionCreators<span class="token punctuation">.</span>addTodo<span class="token punctuation">}</span>
  completeTodo<span class="token operator">=</span><span class="token punctuation">{</span>boundActionCreators<span class="token punctuation">.</span>completeTodo<span class="token punctuation">}</span>
<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在示例代码中，首先创建了一个包含了多个动作创建函数的 <code>actionCreators</code> 对象。然后使用 <code>bindActionCreators</code> 将 <code>actionCreators</code> 中的所有动作创建函数与 Redux store 的派发函数 <code>dispatch</code> 绑定，生成了一个新的对象 <code>boundActionCreators</code>。</p><p>通过调用 <code>boundActionCreators</code> 的函数，可以在组件中自动派发对应的动作到 Redux store，而无需手动编写派发动作的代码。</p><h2 id="hooks-函数" tabindex="-1"><a class="header-anchor" href="#hooks-函数" aria-hidden="true">#</a> hooks 函数</h2><p>react-redux 库提供了多个钩子（hooks）函数，用于 react 组件访问 redux 的状态和操作。下面是常用的 hooks 函数以及用法</p><h3 id="useselector" tabindex="-1"><a class="header-anchor" href="#useselector" aria-hidden="true">#</a> <code>useSelector</code></h3><p><code>useSelector</code>：用于选择 Redux store 中感兴趣的状态。它接受一个选择器函数作为参数，并返回选择器函数返回的值。</p><blockquote><p>使用该钩子可以避免在组件中订阅整个状态树，提供了更好的性能。</p></blockquote><p>示例用法：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useSelector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token parameter">state</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 在这里使用 counter</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token comment">// 组件的 JSX</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usedispatch" tabindex="-1"><a class="header-anchor" href="#usedispatch" aria-hidden="true">#</a> <code>useDispatch</code></h3><p><code>useDispatch</code>：用于获取 Redux store 中的 dispatch 函数。<code>dispatch</code> 用于派发操作（dispatch actions）改变 Redux 中的状态。</p><p>示例用法：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useDispatch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-redux&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token function">useDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 在这里使用 dispatch</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;INCREMENT&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Increment</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usestore" tabindex="-1"><a class="header-anchor" href="#usestore" aria-hidden="true">#</a> <code>useStore</code></h3><p><code>useStore</code>：用于获取 Redux store 对象。通过这个钩子可以直接访问 Redux store 的内部方法和数据。</p><p>示例用法：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 在这里使用 store 和 state</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token comment">// 组件的 JSX</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="useactions" tabindex="-1"><a class="header-anchor" href="#useactions" aria-hidden="true">#</a> <code>useActions</code></h3><p><code>useActions</code>：用于绑定动作创建函数（action creators），以便在组件中使用。它接受一个包含动作创建函数的对象作为参数，并返回已绑定到 Redux store 的动作创建函数。</p><p>示例用法：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useActions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> increment<span class="token punctuation">,</span> decrement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./actions&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> incrementAction<span class="token punctuation">,</span> decrementAction <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useActions</span><span class="token punctuation">(</span><span class="token punctuation">{</span> increment<span class="token punctuation">,</span> decrement <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 在这里使用 incrementAction 和 decrementAction</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token comment">// 组件的 JSX</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="搭配-react-hooks" tabindex="-1"><a class="header-anchor" href="#搭配-react-hooks" aria-hidden="true">#</a> 搭配 react hooks</h2><h3 id="useeffect" tabindex="-1"><a class="header-anchor" href="#useeffect" aria-hidden="true">#</a> useEffect</h3><p><code>useEffect</code>：React 自带的钩子函数，用于在组件渲染完成后执行副作用操作。在 React Redux 中，如果你想在组件挂载后执行异步操作或订阅状态变化，可以使用该钩子函数。</p><p>示例用法：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useDispatch<span class="token punctuation">,</span> useSelector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> fetchData <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./actions&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token function">useDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token parameter">state</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 在这里使用 data</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token comment">// 组件的 JSX</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usememo" tabindex="-1"><a class="header-anchor" href="#usememo" aria-hidden="true">#</a> useMemo</h3><p><code>useMemo</code>：React 自带的钩子函数，用于在组件渲染过程中进行记忆化计算，以提高性能。在 React Redux 中，可以使用该钩子函数对选择器函数进行记忆化，以避免不必要的重复计算。</p><p>示例用法：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useSelector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createSelector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;reselect&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">selectData</span> <span class="token operator">=</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>data<span class="token punctuation">;</span>

<span class="token keyword">const</span> memoizedSelector <span class="token operator">=</span> <span class="token function">createSelector</span><span class="token punctuation">(</span>
  selectData<span class="token punctuation">,</span>
  <span class="token parameter">data</span> <span class="token operator">=&gt;</span> data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>completed<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> filteredData <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span>memoizedSelector<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 在这里使用 filteredData</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token comment">// 组件的 JSX</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><p>对比是一种非常棒的学习编程方法，用已知的经验代入到新的知识上，帮助我们加深理解，促进内化。<br> 下面用 vuex 和 redux 进行对比，会发现两者除了在语法上不同，但在功能、设计、理念、用法上如此一致，</p><h2 id="功能" tabindex="-1"><a class="header-anchor" href="#功能" aria-hidden="true">#</a> 功能</h2><p>无论 redux 还是 vuex，本质作用都是一个状态管理的工具，用于共享数据的仓库。<br><strong>区别：</strong><br> 1、 redux 可以适用于任何 JavaScript 框架中，无论 react 还是 angluar 或者 vue，当然 vue 有自己的仓库工具 vuex。<br> 2、vuex 只适用于 vue 框架之中</p><h2 id="设计上" tabindex="-1"><a class="header-anchor" href="#设计上" aria-hidden="true">#</a> 设计上</h2><p>1、redux</p><ol><li>redux 中不可以直接修改原始 state 数据，需要拷贝原数据进行修改</li><li>不可执行异步操作，但可以通过中间件处理异步操作</li></ol><p>2、vuex</p><ol><li>vuex 不能直接修改 store 数据，需要通过提交 mutaions 来修改。</li><li>提供了 actions 来处理异步函数，Actions 类似于 mutations，但可以包含异步代码</li></ol><h2 id="使用步骤" tabindex="-1"><a class="header-anchor" href="#使用步骤" aria-hidden="true">#</a> <strong>使用步骤：</strong></h2><p>vuex 和 react 在语法上各有不同，但在步骤都可以统一为 3 步：<br> 1、创建仓库；2、获取仓库；3、修改仓库、<br> 在具体实现上如下：<br> Redux：使用 Redux 的步骤包括定义 action 类型、创建 action 创建函数、编写 reducer 处理器，以及创建和配置 store。<br> Vuex：在使用 Vuex 时，需要定义 state，然后编写 mutations 来修改 state，接着可以定义 actions 来处理异步操作，最后创建一个 Vuex 的实例并配置它。</p><h2 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点" aria-hidden="true">#</a> 优缺点：</h2><h3 id="redux" tabindex="-1"><a class="header-anchor" href="#redux" aria-hidden="true">#</a> redux</h3><p>Redux 的优点：</p><ul><li>可预测性：通过 action 和 reducer 明确描述数据变化。</li><li>可追溯性：记录所有的 action，便于调试和错误处理。</li><li>可测试性：纯函数 reducer 和 action 创建函数易于测试。</li></ul><p>Redux 的缺点：</p><ul><li>学习曲线较陡：相对于简单的状态管理需求，使用 Redux 可能有些繁琐。</li><li>需要编写大量的模板代码。</li><li>需要使用第三方中间件来处理异步操作。</li></ul><h3 id="vuex" tabindex="-1"><a class="header-anchor" href="#vuex" aria-hidden="true">#</a> vuex</h3><p>Vuex 的优点：</p><ul><li>与 Vue.js 集成：作为 Vue.js 的官方状态管理库，与 Vue.js 的集成非常方便。</li><li>简单易用：相对于 Redux，使用 Vuex 更加简单和直观。</li><li>适合中小型项目：对于中小型单页面应用，Vuex 提供了足够的功能，而且使用起来更加轻量。</li></ul><p>Vuex 的缺点：</p>`,129),r=n("li",null,"对于小型项目可能过于繁琐。",-1),d=n("br",null,null,-1),k={href:"https://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html",target:"_blank",rel:"noopener noreferrer"},v=n("br",null,null,-1),m={href:"https://cn.redux.js.org/",target:"_blank",rel:"noopener noreferrer"};function b(h,x){const a=p("ExternalLinkIcon");return o(),c("div",null,[u,n("ul",null,[r,n("li",null,[s("在大型项目中，过度使用 Vuex 可能导致较为复杂的代码结构。 "),n("blockquote",null,[n("p",null,[s("参考链接："),d,n("a",k,[s("https://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html"),e(a)]),v,n("a",m,[s("https://cn.redux.js.org/"),e(a)])])])])])])}const f=t(l,[["render",b],["__file","gg9lt52dzff45ecl.html.vue"]]);export{f as default};
