import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,e as t}from"./app-f50fa1a8.js";const e={},o=t(`<h1 id="函数名称" tabindex="-1"><a class="header-anchor" href="#函数名称" aria-hidden="true">#</a> 函数名称</h1><p>按照惯例，通常将事件处理程序命名为 handle，后接事件名。你会经常看到 onClick={handleClick}，onMouseEnter={handleMouseEnter} 等。</p><table><thead><tr><th>传递一个函数（正确）</th><th>调用一个函数（错误）</th></tr></thead><tbody><tr><td>&lt;button onClick={() =&gt; alert(&#39;...&#39;)}&gt;</td><td>&lt;button onClick={alert(&#39;...&#39;)}&gt;</td></tr></tbody></table><p>如果按如下方式传递内联代码，并不会在点击时触发，而是会在每次组件渲染时触发：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 这个 alert 在组件渲染时触发，而不是点击时触发！

&lt;button onClick={alert(&#39;你点击了我！&#39;)}&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你想要定义内联事件处理函数，请将其包装在匿名函数中，如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;button onClick={() =&gt; alert(&#39;你点击了我！&#39;)}&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参数传参" tabindex="-1"><a class="header-anchor" href="#参数传参" aria-hidden="true">#</a> 参数传参：</h2><h3 id="_1、箭头函数中执行" tabindex="-1"><a class="header-anchor" href="#_1、箭头函数中执行" aria-hidden="true">#</a> 1、箭头函数中执行</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
<span class="token keyword">function</span> <span class="token function">handeClick</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token function">handeClick</span><span class="token punctuation">(</span><span class="token string">&#39;点我&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span> 点我 <span class="token operator">&lt;</span><span class="token operator">/</span>butotn<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>箭头函数，都会创建一个新的函数实例，因此容易引起性能问题。但是在大多数情况下，性能影响并不显著。</p><h3 id="_2、推荐写法-bind方法" tabindex="-1"><a class="header-anchor" href="#_2、推荐写法-bind方法" aria-hidden="true">#</a> 2、推荐写法：<code>bind</code>方法</h3><p>在这种情况下，我们使用 Function.prototype.bind 方法来绑定 handleClick 函数的上下文为 null，并传递参数 param</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">handeClick</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">handeClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;点我	&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>点我<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、错误写法" tabindex="-1"><a class="header-anchor" href="#_3、错误写法" aria-hidden="true">#</a> 3、错误写法</h3><p>以下代码中 handleClick 会在渲染时立即执行</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">handeClick</span><span class="token punctuation">(</span><span class="token string">&#39;韩庆元&#39;</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>点我<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这种行为与 React 的事件处理机制不一致。<br><strong>在 React 中，事件处理函数应该是一个函数引用，而不是一个函数的调用结果</strong>。当你使用 button onClick={handeClick(&#39;韩庆元&#39;)} 这样的方式时，实际上会立即执行 handeClick(&#39;韩庆元&#39;) 函数，并将其返回值作为事件处理函数，而不是绑定函数本身。</p>`,18),p=[o];function c(i,l){return a(),s("div",null,p)}const u=n(e,[["render",c],["__file","bgd0siymr5kortqz.html.vue"]]);export{u as default};
