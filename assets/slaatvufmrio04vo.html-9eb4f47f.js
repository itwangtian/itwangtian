const e=JSON.parse('{"key":"v-fea94bac","path":"/docs/slaatvufmrio04vo.html","title":"react hooks 全攻略","lang":"zh-CN","frontmatter":{"title":"react hooks 全攻略","urlname":"slaatvufmrio04vo","updated":"2023-09-27 19:54:08","description":"一、什么是 hooks？ React Hooks 是 React 提供的一种功能，允许我们在函数组件中使用状态和其他 React 特性。使用 Hooks 可以简化函数组件中的状态管理和副作用处理。 为什么要使用 Hooks 呢？ 因为在 React 之前，只能使用类组件来拥有状态和处理副作用。这导致在函数组件中复用状态逻辑变得困难，同时处理副作用也变得复杂，如数据获取和事件处理等。 React Hooks 的目的是解决这些问题。它提供了一种简洁的方式来在函数组件中定义和复用状态逻辑，以及处理副作用。通过使用 Hooks，我们可以更自由地编写组件，而不需要使用类组件的繁琐结构。","head":[["meta",{"property":"og:url","content":"http://www.itwangtian.com/docs/slaatvufmrio04vo.html"}],["meta",{"property":"og:site_name","content":"王天的web进阶之路"}],["meta",{"property":"og:title","content":"react hooks 全攻略"}],["meta",{"property":"og:description","content":"一、什么是 hooks？ React Hooks 是 React 提供的一种功能，允许我们在函数组件中使用状态和其他 React 特性。使用 Hooks 可以简化函数组件中的状态管理和副作用处理。 为什么要使用 Hooks 呢？ 因为在 React 之前，只能使用类组件来拥有状态和处理副作用。这导致在函数组件中复用状态逻辑变得困难，同时处理副作用也变得复杂，如数据获取和事件处理等。 React Hooks 的目的是解决这些问题。它提供了一种简洁的方式来在函数组件中定义和复用状态逻辑，以及处理副作用。通过使用 Hooks，我们可以更自由地编写组件，而不需要使用类组件的繁琐结构。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-30T13:53:52.000Z"}],["meta",{"property":"article:author","content":"程序员王天"}],["meta",{"property":"article:modified_time","content":"2023-09-30T13:53:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"react hooks 全攻略\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-30T13:53:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"程序员王天\\",\\"url\\":\\"http://www.itwangtian.com\\"}]}"]]},"headers":[{"level":2,"title":"为什么要使用 Hooks 呢？","slug":"为什么要使用-hooks-呢","link":"#为什么要使用-hooks-呢","children":[]},{"level":2,"title":"Hooks 的实现原理","slug":"hooks-的实现原理","link":"#hooks-的实现原理","children":[]},{"level":2,"title":"举个栗子","slug":"举个栗子","link":"#举个栗子","children":[]},{"level":2,"title":"useState","slug":"usestate","link":"#usestate","children":[]},{"level":2,"title":"useEffec","slug":"useeffec","link":"#useeffec","children":[{"level":3,"title":"获取数据并更新状态：","slug":"获取数据并更新状态","link":"#获取数据并更新状态","children":[]},{"level":3,"title":"订阅和取消订阅事件：","slug":"订阅和取消订阅事件","link":"#订阅和取消订阅事件","children":[]},{"level":3,"title":"这里还有一些小技巧：","slug":"这里还有一些小技巧","link":"#这里还有一些小技巧","children":[]},{"level":3,"title":"执行两次的 useEffect","slug":"执行两次的-useeffect","link":"#执行两次的-useeffect","children":[]}]},{"level":2,"title":"useRef","slug":"useref","link":"#useref","children":[{"level":3,"title":"为什么使用 useRef","slug":"为什么使用-useref","link":"#为什么使用-useref","children":[]},{"level":3,"title":"useRef 实现原理","slug":"useref-实现原理","link":"#useref-实现原理","children":[]},{"level":3,"title":"useRef 的主要用途","slug":"useref-的主要用途","link":"#useref-的主要用途","children":[]},{"level":3,"title":"举个栗子","slug":"举个栗子-1","link":"#举个栗子-1","children":[]},{"level":3,"title":"注意！","slug":"注意","link":"#注意","children":[]}]},{"level":2,"title":"useMemo","slug":"usememo","link":"#usememo","children":[]},{"level":2,"title":"useCallback","slug":"usecallback","link":"#usecallback","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"usecallback 和 react.mome 区别","slug":"usecallback-和-react-mome-区别","link":"#usecallback-和-react-mome-区别","children":[]},{"level":3,"title":"注意！防止缓存浪费","slug":"注意-防止缓存浪费","link":"#注意-防止缓存浪费","children":[]}]},{"level":2,"title":"useRouteGuard：路由守卫","slug":"userouteguard-路由守卫","link":"#userouteguard-路由守卫","children":[]},{"level":2,"title":"useUpdate ：重新渲染","slug":"useupdate-重新渲染","link":"#useupdate-重新渲染","children":[]},{"level":2,"title":"useMount：监听渲染","slug":"usemount-监听渲染","link":"#usemount-监听渲染","children":[]},{"level":2,"title":"useUnmount：监听销毁","slug":"useunmount-监听销毁","link":"#useunmount-监听销毁","children":[]},{"level":2,"title":"useMount 与 useUmount 案例","slug":"usemount-与-useumount-案例","link":"#usemount-与-useumount-案例","children":[]},{"level":2,"title":"useEffect 内部不能修改 state：","slug":"useeffect-内部不能修改-state","link":"#useeffect-内部不能修改-state","children":[]},{"level":2,"title":"useEffect 可能出现死循环：","slug":"useeffect-可能出现死循环","link":"#useeffect-可能出现死循环","children":[]},{"level":2,"title":"hooks 中禁用循环","slug":"hooks-中禁用循环","link":"#hooks-中禁用循环","children":[{"level":3,"title":"官方解释：","slug":"官方解释","link":"#官方解释","children":[]},{"level":3,"title":"为什么呢？","slug":"为什么呢","link":"#为什么呢","children":[]},{"level":3,"title":"错误示例","slug":"错误示例","link":"#错误示例","children":[]},{"level":3,"title":"解决","slug":"解决","link":"#解决","children":[]},{"level":3,"title":"如何更好的规避呢？","slug":"如何更好的规避呢","link":"#如何更好的规避呢","children":[]}]}],"git":{"createdTime":1696082032000,"updatedTime":1696082032000,"contributors":[{"name":"1970652600@qq.com~","email":"1970652600@qq.com","commits":1}]},"readingTime":{"minutes":15.64,"words":4691},"filePathRelative":"docs/slaatvufmrio04vo.md","localizedDate":"2023年9月30日","excerpt":"<h1> 一、什么是 hooks？</h1>\\n<p>React Hooks 是 React 提供的一种功能，允许我们在函数组件中使用状态和其他 React 特性。使用 Hooks 可以简化函数组件中的状态管理和副作用处理。</p>\\n<h2> 为什么要使用 Hooks 呢？</h2>\\n<p>因为在 React 之前，只能使用类组件来拥有状态和处理副作用。这导致在函数组件中复用状态逻辑变得困难，同时处理副作用也变得复杂，如数据获取和事件处理等。</p>\\n<p>React Hooks 的目的是解决这些问题。它提供了一种简洁的方式来在函数组件中定义和复用状态逻辑，以及处理副作用。通过使用 Hooks，我们可以更自由地编写组件，而不需要使用类组件的繁琐结构。</p>","autoDesc":true}');export{e as data};
