const n=JSON.parse('{"key":"v-6ac0da13","path":"/docs/lusv5pm2rbl2ygkf.html","title":"typescript装饰器：简化代码、增加功能的利器","lang":"zh-CN","frontmatter":{"title":"typescript装饰器：简化代码、增加功能的利器","urlname":"lusv5pm2rbl2ygkf","date":"2023-08-16 19:43:47","updated":"2023-10-03 18:07:56","description":"装饰器语法 装饰器是 TypeScript（简称 TS）中的一个特性，它可以在不修改 原始代码的情况下，通过添加额外的功能来改进代码。装饰器通常以@符号紧跟着一个函数或者类来表示。装饰器可以用于函数、类、属性和方法。 类装饰器 类装饰器用于修饰类，可以添加额外的行为或者修改类的行为。它可以用于在类声明之前对类进行拦截、修改或者扩展，对类进行修饰。类装饰器的使用场景很多，比如日志记录、性能分析、权限控制等。举个例子，想象一个社交平台的用户类，可以使用类装饰器添加检查用户是否在线的功能： function checkOnline(target: any) { return class extends target { isOnline() { // 检查用户是否在线的逻辑 } }; } @checkOnline class User { // 用户类的定义 }","head":[["meta",{"property":"og:url","content":"http://www.itwangtian.com/docs/lusv5pm2rbl2ygkf.html"}],["meta",{"property":"og:site_name","content":"王天的web进阶之路"}],["meta",{"property":"og:title","content":"typescript装饰器：简化代码、增加功能的利器"}],["meta",{"property":"og:description","content":"装饰器语法 装饰器是 TypeScript（简称 TS）中的一个特性，它可以在不修改 原始代码的情况下，通过添加额外的功能来改进代码。装饰器通常以@符号紧跟着一个函数或者类来表示。装饰器可以用于函数、类、属性和方法。 类装饰器 类装饰器用于修饰类，可以添加额外的行为或者修改类的行为。它可以用于在类声明之前对类进行拦截、修改或者扩展，对类进行修饰。类装饰器的使用场景很多，比如日志记录、性能分析、权限控制等。举个例子，想象一个社交平台的用户类，可以使用类装饰器添加检查用户是否在线的功能： function checkOnline(target: any) { return class extends target { isOnline() { // 检查用户是否在线的逻辑 } }; } @checkOnline class User { // 用户类的定义 }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-15T02:54:53.000Z"}],["meta",{"property":"article:author","content":"程序员王天"}],["meta",{"property":"article:published_time","content":"2023-08-16T19:43:47.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-15T02:54:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"typescript装饰器：简化代码、增加功能的利器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-16T19:43:47.000Z\\",\\"dateModified\\":\\"2023-10-15T02:54:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"程序员王天\\",\\"url\\":\\"http://www.itwangtian.com\\"}]}"]]},"headers":[{"level":3,"title":"装饰器语法","slug":"装饰器语法","link":"#装饰器语法","children":[]},{"level":3,"title":"类装饰器","slug":"类装饰器","link":"#类装饰器","children":[]},{"level":3,"title":"属性装饰器","slug":"属性装饰器","link":"#属性装饰器","children":[]},{"level":3,"title":"方法装饰器","slug":"方法装饰器","link":"#方法装饰器","children":[]},{"level":3,"title":"解决痛点和实战案例","slug":"解决痛点和实战案例","link":"#解决痛点和实战案例","children":[]}],"git":{"createdTime":1696082032000,"updatedTime":1697338493000,"contributors":[{"name":"1970652600@qq.com~","email":"1970652600@qq.com","commits":1},{"name":"小王在努力","email":"17638567073@163.com","commits":1}]},"readingTime":{"minutes":3.29,"words":988},"filePathRelative":"docs/lusv5pm2rbl2ygkf.md","localizedDate":"2023年8月16日","excerpt":"<h3> 装饰器语法</h3>\\n<p>装饰器是 TypeScript（简称 TS）中的一个特性，它可以在不修改 原始代码的情况下，通过添加额外的功能来改进代码。装饰器通常以<code>@</code>符号紧跟着一个函数或者类来表示。装饰器可以用于函数、类、属性和方法。</p>\\n<h3> 类装饰器</h3>\\n<p>类装饰器用于修饰类，可以添加额外的行为或者修改类的行为。它可以用于在类声明之前对类进行拦截、修改或者扩展，对类进行修饰。类装饰器的使用场景很多，比如日志记录、性能分析、权限控制等。举个例子，想象一个社交平台的用户类，可以使用类装饰器添加检查用户是否在线的功能：</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">checkOnline</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">any</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\"><span class=\\"token keyword\\">extends</span></span> target <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">isOnline</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">// 检查用户是否在线的逻辑</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token decorator\\"><span class=\\"token at operator\\">@</span><span class=\\"token function\\">checkOnline</span></span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">User</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 用户类的定义</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
