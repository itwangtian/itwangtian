const n=JSON.parse('{"key":"v-72a781d6","path":"/docs/iy5mr7og6iora1t1.html","title":"class 类","lang":"zh-CN","frontmatter":{"title":"class 类","urlname":"iy5mr7og6iora1t1","date":"2023-07-21 10:24:43","updated":"2023-08-15 15:56:03","description":"class 相当于 es5 中升级版的构造函数 class 中无需用“ ，” 分割 ， 添加会执行报错 class People { name: string = \\"张三\\"; // 1、属性除了可以定义在constructor中，也可以定义在最顶部 age: number = 18; // 年龄 sex: boolean = true; // 为true 性别男 // 2、static 设置为（静态）私有属性，在class本身的属性，并不是实例对象中的属性 static address: string = \\"北京顺义\\"; // 3、constructor()方法是类的默认方法， // 通过new命令生成对象实例时，自动调用该方法。 // 一个类必须有constructor()方法，如果没有显式定义， 一个空的constructor()方法会被默认添加。 // 属性是实例对象自身的属性，而不是定义在实例对象的原型上面。 constructor(sex, age) { this.sex = sex; this.age = age; } // 4、类的实例属性、方法默认定义在原型class上，使用this.可以定义在对象上 hi() { return `你好呀 ${this.name}, 你今年 ${this.age} 岁啦，你是一个 ${ this.sex ? \\"男生\\" : \\"女生\\" }，住在 ${People.address}`; } } // 5、继承 People ,创建一个新的calss 类 class Lisi extends People { constructor(sex, name) { super(true, name); console.log(this.name); } // 在原先基础上，新增一个setName 方法来修改name名称 setName(name: string): string { this.name = name; console.log(\\"super-sex\\", this.sex); // 6、在 ES6 中，super 是一个关键字，用于在子类中调用父类的构造函数和方法。 return super.hi(); } } // 7、类必须使用new调用，否则会报错。 // 这是它跟普通构造函数的一个主要区别，后者不用new也可以执行。 const zhangSan = new People(false, 19); const zhangHi = zhangSan.hi(); const liHi = new Lisi(false, 29).setName(\\"李四\\"); console.log(\\"zhangHI\\", zhangHi); console.log(\\"liHi\\", liHi); // 8、存取器 使用 getter 和 setter 可以改变属性的赋值和读取行为： // 和vue中的computed 计算属性异曲同工，用与计算转换等操作 // vue中的计算属性 有缓存、和数据依赖 class Animal { constructor(name) { this.name = name; } get name() { return \\"Jack\\"; } set name(value) { console.log(\\"setter: \\" + value); } } const a = new Animal(\\"Kitty\\"); // setter: Kitty a.name = \\"Tom\\"; // setter: Tom console.log(\\"存取器：\\", a.name); // Jack","head":[["meta",{"property":"og:url","content":"http://www.itwangtian.com/docs/iy5mr7og6iora1t1.html"}],["meta",{"property":"og:site_name","content":"王天的web进阶之路"}],["meta",{"property":"og:title","content":"class 类"}],["meta",{"property":"og:description","content":"class 相当于 es5 中升级版的构造函数 class 中无需用“ ，” 分割 ， 添加会执行报错 class People { name: string = \\"张三\\"; // 1、属性除了可以定义在constructor中，也可以定义在最顶部 age: number = 18; // 年龄 sex: boolean = true; // 为true 性别男 // 2、static 设置为（静态）私有属性，在class本身的属性，并不是实例对象中的属性 static address: string = \\"北京顺义\\"; // 3、constructor()方法是类的默认方法， // 通过new命令生成对象实例时，自动调用该方法。 // 一个类必须有constructor()方法，如果没有显式定义， 一个空的constructor()方法会被默认添加。 // 属性是实例对象自身的属性，而不是定义在实例对象的原型上面。 constructor(sex, age) { this.sex = sex; this.age = age; } // 4、类的实例属性、方法默认定义在原型class上，使用this.可以定义在对象上 hi() { return `你好呀 ${this.name}, 你今年 ${this.age} 岁啦，你是一个 ${ this.sex ? \\"男生\\" : \\"女生\\" }，住在 ${People.address}`; } } // 5、继承 People ,创建一个新的calss 类 class Lisi extends People { constructor(sex, name) { super(true, name); console.log(this.name); } // 在原先基础上，新增一个setName 方法来修改name名称 setName(name: string): string { this.name = name; console.log(\\"super-sex\\", this.sex); // 6、在 ES6 中，super 是一个关键字，用于在子类中调用父类的构造函数和方法。 return super.hi(); } } // 7、类必须使用new调用，否则会报错。 // 这是它跟普通构造函数的一个主要区别，后者不用new也可以执行。 const zhangSan = new People(false, 19); const zhangHi = zhangSan.hi(); const liHi = new Lisi(false, 29).setName(\\"李四\\"); console.log(\\"zhangHI\\", zhangHi); console.log(\\"liHi\\", liHi); // 8、存取器 使用 getter 和 setter 可以改变属性的赋值和读取行为： // 和vue中的computed 计算属性异曲同工，用与计算转换等操作 // vue中的计算属性 有缓存、和数据依赖 class Animal { constructor(name) { this.name = name; } get name() { return \\"Jack\\"; } set name(value) { console.log(\\"setter: \\" + value); } } const a = new Animal(\\"Kitty\\"); // setter: Kitty a.name = \\"Tom\\"; // setter: Tom console.log(\\"存取器：\\", a.name); // Jack"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-30T13:53:52.000Z"}],["meta",{"property":"article:author","content":"程序员王天"}],["meta",{"property":"article:published_time","content":"2023-07-21T10:24:43.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-30T13:53:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"class 类\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-21T10:24:43.000Z\\",\\"dateModified\\":\\"2023-09-30T13:53:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"程序员王天\\",\\"url\\":\\"http://www.itwangtian.com\\"}]}"]]},"headers":[],"git":{"createdTime":1696082032000,"updatedTime":1696082032000,"contributors":[{"name":"1970652600@qq.com~","email":"1970652600@qq.com","commits":1}]},"readingTime":{"minutes":4.7,"words":1409},"filePathRelative":"docs/iy5mr7og6iora1t1.md","localizedDate":"2023年7月21日","excerpt":"<p><code>class</code> 相当于 es5 中升级版的构造函数</p>\\n<blockquote>\\n<p>class 中无需用“ ，” 分割 ， 添加会执行报错</p>\\n</blockquote>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">People</span> <span class=\\"token punctuation\\">{</span>\\n  name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"张三\\"</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// 1、属性除了可以定义在constructor中，也可以定义在最顶部</span>\\n  age<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">18</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 年龄</span>\\n  sex<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">boolean</span> <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 为true 性别男</span>\\n  <span class=\\"token comment\\">// 2、static 设置为（静态）私有属性，在class本身的属性，并不是实例对象中的属性</span>\\n  <span class=\\"token keyword\\">static</span> address<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"北京顺义\\"</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// 3、constructor()方法是类的默认方法，</span>\\n  <span class=\\"token comment\\">// 通过new命令生成对象实例时，自动调用该方法。</span>\\n  <span class=\\"token comment\\">// 一个类必须有constructor()方法，如果没有显式定义， 一个空的constructor()方法会被默认添加。</span>\\n  <span class=\\"token comment\\">// 属性是实例对象自身的属性，而不是定义在实例对象的原型上面。</span>\\n  <span class=\\"token function\\">constructor</span><span class=\\"token punctuation\\">(</span>sex<span class=\\"token punctuation\\">,</span> age<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>sex <span class=\\"token operator\\">=</span> sex<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>age <span class=\\"token operator\\">=</span> age<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token comment\\">// 4、类的实例属性、方法默认定义在原型class上，使用this.可以定义在对象上</span>\\n  <span class=\\"token function\\">hi</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">`</span><span class=\\"token string\\">你好呀 </span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">${</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>name<span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string\\">, 你今年 </span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">${</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>age<span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string\\"> 岁啦，你是一个 </span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">${</span>\\n      <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>sex <span class=\\"token operator\\">?</span> <span class=\\"token string\\">\\"男生\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"女生\\"</span>\\n    <span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string\\">，住在 </span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">${</span>People<span class=\\"token punctuation\\">.</span>address<span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token template-punctuation string\\">`</span></span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">// 5、继承 People ,创建一个新的calss 类</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Lisi</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">People</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">constructor</span><span class=\\"token punctuation\\">(</span>sex<span class=\\"token punctuation\\">,</span> name<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">super</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span> name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token comment\\">// 在原先基础上，新增一个setName 方法来修改name名称</span>\\n  <span class=\\"token function\\">setName</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>name <span class=\\"token operator\\">=</span> name<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"super-sex\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>sex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 6、在 ES6 中，super 是一个关键字，用于在子类中调用父类的构造函数和方法。</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">super</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">hi</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">// 7、类必须使用new调用，否则会报错。</span>\\n<span class=\\"token comment\\">// 这是它跟普通构造函数的一个主要区别，后者不用new也可以执行。</span>\\n<span class=\\"token keyword\\">const</span> zhangSan <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">People</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">19</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> zhangHi <span class=\\"token operator\\">=</span> zhangSan<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">hi</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> liHi <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Lisi</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">29</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setName</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"李四\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"zhangHI\\"</span><span class=\\"token punctuation\\">,</span> zhangHi<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"liHi\\"</span><span class=\\"token punctuation\\">,</span> liHi<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 8、存取器 使用 getter 和 setter 可以改变属性的赋值和读取行为：</span>\\n<span class=\\"token comment\\">// 和vue中的computed 计算属性异曲同工，用与计算转换等操作</span>\\n<span class=\\"token comment\\">// vue中的计算属性 有缓存、和数据依赖</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Animal</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">constructor</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>name <span class=\\"token operator\\">=</span> name<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">get</span> <span class=\\"token function\\">name</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token string\\">\\"Jack\\"</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">set</span> <span class=\\"token function\\">name</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"setter: \\"</span> <span class=\\"token operator\\">+</span> value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">const</span> a <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Animal</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Kitty\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// setter: Kitty</span>\\na<span class=\\"token punctuation\\">.</span>name <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"Tom\\"</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// setter: Tom</span>\\n<span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"存取器：\\"</span><span class=\\"token punctuation\\">,</span> a<span class=\\"token punctuation\\">.</span>name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// Jack</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
