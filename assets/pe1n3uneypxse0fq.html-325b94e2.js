const e=JSON.parse('{"key":"v-2e525ceb","path":"/docs/pe1n3uneypxse0fq.html","title":"前端规范指南，让团队代码如出一辙！ESLint + Prettier + husky + lint-staged","lang":"zh-CN","frontmatter":{"title":"前端规范指南，让团队代码如出一辙！ESLint + Prettier + husky + lint-staged","urlname":"pe1n3uneypxse0fq","updated":"2023-09-12 10:31:19","description":"本文从两个方向出发：1、git 提交规范；2、代码风格统一 假如团队中的小伙伴在提交代码时没有遵循规范要求，例如只写了一个\\"修改\\"或\\"更新，这会给团队中其他小伙伴造成困扰呢，不得不花时间查看代码和推测逻辑。 不仅会浪费了时间和精力，可能会导致以下问题： 可读性差 维护困难 变更历史不透明 自动化工具的不兼容 如何统一代码风格，规范提交呢呢？ 推荐使用 ESLint + Prettier + husky + lint-staged","head":[["meta",{"property":"og:url","content":"http://www.itwangtian.com/docs/pe1n3uneypxse0fq.html"}],["meta",{"property":"og:site_name","content":"王天的web进阶之路"}],["meta",{"property":"og:title","content":"前端规范指南，让团队代码如出一辙！ESLint + Prettier + husky + lint-staged"}],["meta",{"property":"og:description","content":"本文从两个方向出发：1、git 提交规范；2、代码风格统一 假如团队中的小伙伴在提交代码时没有遵循规范要求，例如只写了一个\\"修改\\"或\\"更新，这会给团队中其他小伙伴造成困扰呢，不得不花时间查看代码和推测逻辑。 不仅会浪费了时间和精力，可能会导致以下问题： 可读性差 维护困难 变更历史不透明 自动化工具的不兼容 如何统一代码风格，规范提交呢呢？ 推荐使用 ESLint + Prettier + husky + lint-staged"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-01T13:33:25.000Z"}],["meta",{"property":"article:author","content":"程序员王天"}],["meta",{"property":"article:modified_time","content":"2023-10-01T13:33:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"前端规范指南，让团队代码如出一辙！ESLint + Prettier + husky + lint-staged\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-10-01T13:33:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"程序员王天\\",\\"url\\":\\"http://www.itwangtian.com\\"}]}"]]},"headers":[{"level":2,"title":"安装步骤：","slug":"安装步骤","link":"#安装步骤","children":[]},{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"创建 Git 挂钩","slug":"创建-git-挂钩","link":"#创建-git-挂钩","children":[{"level":3,"title":"pre-commit","slug":"pre-commit","link":"#pre-commit","children":[]},{"level":3,"title":"配置 ctrl + s ，自动保存功能","slug":"配置-ctrl-s-自动保存功能","link":"#配置-ctrl-s-自动保存功能","children":[]}]},{"level":2,"title":"cz-conventional-changelog","slug":"cz-conventional-changelog","link":"#cz-conventional-changelog","children":[]},{"level":2,"title":"安装和使用步骤：","slug":"安装和使用步骤","link":"#安装和使用步骤","children":[]},{"level":2,"title":"commitlint（可忽略）","slug":"commitlint-可忽略","link":"#commitlint-可忽略","children":[]},{"level":2,"title":"@typescript-eslint/dot-notation","slug":"typescript-eslint-dot-notation","link":"#typescript-eslint-dot-notation","children":[{"level":3,"title":"错误日志：","slug":"错误日志","link":"#错误日志","children":[]},{"level":3,"title":"错误原因：","slug":"错误原因","link":"#错误原因","children":[]},{"level":3,"title":"解决方式：","slug":"解决方式","link":"#解决方式","children":[]}]},{"level":2,"title":"@typescript-eslint\\" uniquely.","slug":"typescript-eslint-uniquely","link":"#typescript-eslint-uniquely","children":[{"level":3,"title":"错误日志：","slug":"错误日志-1","link":"#错误日志-1","children":[]},{"level":3,"title":"解决方式:","slug":"解决方式-1","link":"#解决方式-1","children":[]}]},{"level":2,"title":"Warning: React version not specified","slug":"warning-react-version-not-specified","link":"#warning-react-version-not-specified","children":[]}],"git":{"createdTime":1696082032000,"updatedTime":1696167205000,"contributors":[{"name":"1970652600@qq.com~","email":"1970652600@qq.com","commits":2}]},"readingTime":{"minutes":12.45,"words":3734},"filePathRelative":"docs/pe1n3uneypxse0fq.md","localizedDate":"2023年9月30日","excerpt":"<blockquote>\\n<p>本文从两个方向出发：1、git 提交规范；2、代码风格统一</p>\\n</blockquote>\\n<p>假如团队中的小伙伴在提交代码时没有遵循规范要求，例如只写了一个\\"修改\\"或\\"更新，这会给团队中其他小伙伴造成困扰呢，不得不花时间查看代码和推测逻辑。</p>\\n<p>不仅会浪费了时间和精力，可能会导致以下问题：</p>\\n<ol>\\n<li>可读性差</li>\\n<li>维护困难</li>\\n<li>变更历史不透明</li>\\n<li>自动化工具的不兼容</li>\\n</ol>\\n<p>如何统一代码风格，规范提交呢呢？ 推荐使用 ESLint + Prettier + husky + lint-staged</p>","autoDesc":true}');export{e as data};
